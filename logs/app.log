2020-04-26 00:46:51,569 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication v0.0.1-SNAPSHOT on 192-168-1-137.tpgi.com.au with PID 3576 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/text-search-counter-api-0.0.1-SNAPSHOT.jar started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 00:46:51,571 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 00:46:51,571 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: local
2020-04-26 00:46:53,444 ERROR org.springframework.kafka.listener.ConcurrentMessageListenerContainer [main] Failed to check topic existence
org.apache.kafka.common.KafkaException: Failed to create new KafkaAdminClient
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:407)
	at org.apache.kafka.clients.admin.AdminClient.create(AdminClient.java:65)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.checkTopics(AbstractMessageListenerContainer.java:353)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:144)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:367)
	... 29 common frames omitted
2020-04-26 00:46:53,552 ERROR org.springframework.boot.SpringApplication [main] Application run failed
org.springframework.context.ApplicationContextException: Failed to start bean 'org.springframework.kafka.config.internalKafkaListenerEndpointRegistry'; nested exception is org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:185)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:827)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:629)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:207)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumerWithAdjustedProperties(DefaultKafkaConsumerFactory.java:193)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:167)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumer(DefaultKafkaConsumerFactory.java:141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.<init>(KafkaMessageListenerContainer.java:616)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer.doStart(KafkaMessageListenerContainer.java:331)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:184)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	... 22 common frames omitted
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:735)
	... 35 common frames omitted
2020-04-26 00:49:05,864 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication on 192-168-1-137.tpgi.com.au with PID 3651 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/classes started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 00:49:05,866 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 00:49:05,866 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: dev
2020-04-26 00:49:07,232 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2020-04-26 00:51:23,733 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication on 192-168-1-137.tpgi.com.au with PID 3734 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/classes started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 00:51:23,734 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 00:51:23,734 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: dev
2020-04-26 00:51:25,143 INFO com.counter.text.TextCounterSpringBootApplication [main] Started TextCounterSpringBootApplication in 1.629 seconds (JVM running for 1.95)
2020-04-26 00:51:25,149 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed suscipit metus, sit amet tristique purus. Etiam sit amet
2020-04-26 00:51:25,179 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> leo sollicitudin, tincidunt lectus vel, ultricies mauris. Donec ultrices lorem in est eleifend, et feugiat libero semper. Duis
2020-04-26 00:51:25,179 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sodales gravida sapien eget efficitur. Ut mattis mollis blandit. Duis nec metus gravida, posuere dolor id, pretium urna.
2020-04-26 00:51:25,179 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Aliquam vitae purus ex. Etiam vitae ipsum leo. Integer blandit, arcu eget commodo scelerisque, risus leo aliquet diam, in
2020-04-26 00:51:25,179 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sagittis metus ex sed elit. Duis vel urna non est fringilla rutrum. Ut molestie sed risus in pharetra. Maecenas eget ante at
2020-04-26 00:51:25,180 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> nulla feugiat euismod. Suspendisse pharetra porttitor lacus non tristique.
2020-04-26 00:51:25,180 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Vivamus varius posuere ligula. Nullam magna metus, elementum vel elementum eu, elementum non magna. Ut cursus
2020-04-26 00:51:25,180 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> arcu vel ligula mollis, in interdum velit maximus. Pellentesque arcu lorem, porttitor et quam vitae, imperdiet venenatis
2020-04-26 00:51:25,180 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> magna. Etiam imperdiet erat vel lectus rhoncus sollicitudin. Praesent at mi a est suscipit tempor sed eu diam. In hac
2020-04-26 00:51:25,180 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> habitasse platea dictumst. Morbi erat mi, iaculis id hendrerit a, sollicitudin et ligula. Vivamus justo nibh, cursus at ultricies
2020-04-26 00:51:25,180 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sed, varius iaculis enim.
2020-04-26 00:51:25,181 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec consequat luctus sapien, quis aliquam ante tristique sit amet. Pellentesque accumsan sollicitudin mi a blandit.
2020-04-26 00:51:25,181 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec ac dui bibendum, pharetra nulla vitae, iaculis purus. Donec fermentum porttitor mollis. Mauris cursus fringilla ex,
2020-04-26 00:51:25,181 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> eget ullamcorper ipsum lacinia in. Nam eget vehicula dui. In eget turpis convallis, ultrices neque vitae, interdum turpis.
2020-04-26 00:51:25,181 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nullam non aliquam sapien, eget volutpat elit. Cras pharetra ex a orci faucibus tristique at ullamcorper nibh. Proin nec
2020-04-26 00:51:25,181 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> lacinia ante, eu rutrum sem.
2020-04-26 00:51:25,181 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Curabitur id libero purus. Vivamus vel velit turpis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Donec
2020-04-26 00:51:25,181 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> at urna eget augue efficitur porttitor at eu elit. Fusce feugiat tempor nulla, at euismod lacus tincidunt sed. Curabitur
2020-04-26 00:51:25,181 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ullamcorper dignissim nisl, eget iaculis orci vestibulum sed. Ut consectetur consectetur urna vestibulum ultricies.
2020-04-26 00:51:25,182 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Maecenas non felis arcu. Fusce in tortor metus. Vestibulum vel felis ut lorem ultricies pretium quis ut metus. Aliquam erat
2020-04-26 00:51:25,182 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> volutpat. Praesent a lorem porttitor, venenatis nisl volutpat, placerat dui. Vivamus ut justo eu orci tincidunt malesuada.
2020-04-26 00:51:25,182 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Interdum et malesuada fames ac ante ipsum primis in faucibus. Etiam facilisis nulla vel leo pretium varius.
2020-04-26 00:51:25,182 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Fusce eleifend tincidunt lacinia. Duis maximus, sapien ac fringilla pretium, augue leo aliquam ligula, quis rutrum leo sem
2020-04-26 00:51:25,182 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> vel magna. Duis commodo lobortis dui, ut rhoncus dolor. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 00:51:25,182 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> per inceptos himenaeos. Nam nec augue augue. Quisque eu orci arcu. Aliquam neque odio, eleifend a dolor sed, dapibus
2020-04-26 00:51:25,187 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> auctor justo. Aliquam sollicitudin arcu sit amet odio gravida, nec viverra nulla efficitur. Phasellus sed libero rutrum lacus
2020-04-26 00:51:25,187 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sollicitudin mattis. Sed fermentum sapien ac dolor elementum, quis vehicula sem tempus.
2020-04-26 00:51:25,188 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Etiam et orci non orci lobortis dictum id vitae massa. Aenean eu erat nulla. Sed posuere ullamcorper magna, tempor
2020-04-26 00:51:25,188 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ultrices justo feugiat rhoncus. Cras fringilla ligula nec euismod tristique. Duis vitae enim eget augue consectetur ultricies.
2020-04-26 00:51:25,188 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nam laoreet sapien at dictum consectetur. Suspendisse tristique purus neque, ut blandit nunc tincidunt et.
2020-04-26 00:51:25,188 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Duis pretium condimentum diam id viverra. Pellentesque sit amet dapibus eros, ac auctor lectus. Praesent eget tellus
2020-04-26 00:51:25,188 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> purus. Proin vel nisl sit amet orci laoreet faucibus eget eu nisi. Nulla id pharetra arcu. Lorem ipsum dolor sit amet,
2020-04-26 00:51:25,188 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> consectetur adipiscing elit. Vivamus ornare lectus eu metus venenatis, quis porttitor nibh convallis. Nulla nunc metus,
2020-04-26 00:51:25,188 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> tristique quis dui sed, interdum imperdiet nisl. Vestibulum mattis tincidunt lacus, imperdiet mattis libero varius rhoncus.
2020-04-26 00:51:25,188 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nam in auctor nisl. Nunc tincidunt accumsan pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 00:51:25,189 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> per inceptos himenaeos. Mauris luctus scelerisque augue, vel finibus ligula semper vel. Lorem ipsum dolor sit amet,
2020-04-26 00:51:25,189 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> consectetur adipiscing elit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.
2020-04-26 00:51:25,189 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nunc ultricies vel nunc eget mollis.
2020-04-26 00:51:25,189 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec ligula felis, ultrices vel blandit ut, hendrerit vel turpis. Duis faucibus dapibus mi ac semper. Duis id tortor tempus
2020-04-26 00:51:25,189 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> augue euismod tempus. Integer vehicula velit ut leo blandit sagittis. Vestibulum ante ipsum primis in faucibus orci luctus et
2020-04-26 00:51:25,189 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ultrices posuere cubilia Curae; Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis
2020-04-26 00:51:25,189 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> egestas. Nunc ut urna vel metus molestie venenatis nec non dui. Integer diam metus, aliquam a gravida et, varius id nulla.
2020-04-26 00:51:25,189 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nunc non porttitor ipsum. Aliquam sapien enim, eleifend nec nunc id, tempus tempus ex. Vivamus nec urna ornare,
2020-04-26 00:51:25,190 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> finibus leo at, posuere urna. Aenean est mi, porta ac gravida at, hendrerit quis elit. Quisque urna mauris, lobortis sit amet
2020-04-26 00:51:25,190 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> tortor eget, laoreet consectetur tortor. Suspendisse id imperdiet nisl, eget pellentesque tortor. Maecenas sit amet mi et ex
2020-04-26 00:51:25,190 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ornare porta sollicitudin vitae tellus. Donec nulla lorem, imperdiet non sodales vitae, congue quis sapien. Quisque nec
2020-04-26 00:51:25,190 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> mattis lacus. Sed dapibus nisi nec libero ornare, in accumsan dolor porttitor. Praesent sodales commodo ultricies.
2020-04-26 00:51:25,190 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Cras id ipsum vestibulum,
2020-04-26 00:51:25,191 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> venenatis eros vitae, maximus magna. Mauris eu blandit tortor, condimentum eleifend dolor.
2020-04-26 00:51:25,191 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Cras eu tellus feugiat, lobortis metus ac, consectetur orci. Phasellus bibendum tincidunt massa non venenatis. Nunc sed
2020-04-26 00:51:25,191 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> molestie metus, vel elementum tortor. Duis malesuada porta nisl ac molestie. In a tellus faucibus, convallis nunc nec,
2020-04-26 00:51:25,191 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sodales lacus. Donec vulputate interdum massa sed posuere. In dapibus eu ligula at sodales. Sed facilisis a sem eget
2020-04-26 00:51:25,191 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> lobortis. Ut viverra ipsum dictum pharetra auctor. Duis tincidunt nulla sapien, sit amet facilisis ante rhoncus eu. Aliquam
2020-04-26 00:51:25,191 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> luctus dolor tortor, vitae interdum felis elementum eget. Nam mattis leo gravida ex elementum, id facilisis lacus ornare.
2020-04-26 00:51:25,208 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed suscipit metus, sit amet tristique purus. Etiam sit amet
2020-04-26 00:51:25,210 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> leo sollicitudin, tincidunt lectus vel, ultricies mauris. Donec ultrices lorem in est eleifend, et feugiat libero semper. Duis
2020-04-26 00:51:25,210 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sodales gravida sapien eget efficitur. Ut mattis mollis blandit. Duis nec metus gravida, posuere dolor id, pretium urna.
2020-04-26 00:51:25,210 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Aliquam vitae purus ex. Etiam vitae ipsum leo. Integer blandit, arcu eget commodo scelerisque, risus leo aliquet diam, in
2020-04-26 00:51:25,210 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sagittis metus ex sed elit. Duis vel urna non est fringilla rutrum. Ut molestie sed risus in pharetra. Maecenas eget ante at
2020-04-26 00:51:25,211 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> nulla feugiat euismod. Suspendisse pharetra porttitor lacus non tristique.
2020-04-26 00:51:25,211 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Vivamus varius posuere ligula. Nullam magna metus, elementum vel elementum eu, elementum non magna. Ut cursus
2020-04-26 00:51:25,211 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> arcu vel ligula mollis, in interdum velit maximus. Pellentesque arcu lorem, porttitor et quam vitae, imperdiet venenatis
2020-04-26 00:51:25,211 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> magna. Etiam imperdiet erat vel lectus rhoncus sollicitudin. Praesent at mi a est suscipit tempor sed eu diam. In hac
2020-04-26 00:51:25,211 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> habitasse platea dictumst. Morbi erat mi, iaculis id hendrerit a, sollicitudin et ligula. Vivamus justo nibh, cursus at ultricies
2020-04-26 00:51:25,211 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sed, varius iaculis enim.
2020-04-26 00:51:25,212 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec consequat luctus sapien, quis aliquam ante tristique sit amet. Pellentesque accumsan sollicitudin mi a blandit.
2020-04-26 00:51:25,212 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec ac dui bibendum, pharetra nulla vitae, iaculis purus. Donec fermentum porttitor mollis. Mauris cursus fringilla ex,
2020-04-26 00:51:25,212 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> eget ullamcorper ipsum lacinia in. Nam eget vehicula dui. In eget turpis convallis, ultrices neque vitae, interdum turpis.
2020-04-26 00:51:25,212 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nullam non aliquam sapien, eget volutpat elit. Cras pharetra ex a orci faucibus tristique at ullamcorper nibh. Proin nec
2020-04-26 00:51:25,213 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> lacinia ante, eu rutrum sem.
2020-04-26 00:51:25,213 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Curabitur id libero purus. Vivamus vel velit turpis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Donec
2020-04-26 00:51:25,213 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> at urna eget augue efficitur porttitor at eu elit. Fusce feugiat tempor nulla, at euismod lacus tincidunt sed. Curabitur
2020-04-26 00:51:25,213 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ullamcorper dignissim nisl, eget iaculis orci vestibulum sed. Ut consectetur consectetur urna vestibulum ultricies.
2020-04-26 00:51:25,213 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Maecenas non felis arcu. Fusce in tortor metus. Vestibulum vel felis ut lorem ultricies pretium quis ut metus. Aliquam erat
2020-04-26 00:51:25,214 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> volutpat. Praesent a lorem porttitor, venenatis nisl volutpat, placerat dui. Vivamus ut justo eu orci tincidunt malesuada.
2020-04-26 00:51:25,214 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Interdum et malesuada fames ac ante ipsum primis in faucibus. Etiam facilisis nulla vel leo pretium varius.
2020-04-26 00:51:25,214 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Fusce eleifend tincidunt lacinia. Duis maximus, sapien ac fringilla pretium, augue leo aliquam ligula, quis rutrum leo sem
2020-04-26 00:51:25,214 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> vel magna. Duis commodo lobortis dui, ut rhoncus dolor. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 00:51:25,220 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> per inceptos himenaeos. Nam nec augue augue. Quisque eu orci arcu. Aliquam neque odio, eleifend a dolor sed, dapibus
2020-04-26 00:51:25,221 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> auctor justo. Aliquam sollicitudin arcu sit amet odio gravida, nec viverra nulla efficitur. Phasellus sed libero rutrum lacus
2020-04-26 00:51:25,221 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sollicitudin mattis. Sed fermentum sapien ac dolor elementum, quis vehicula sem tempus.
2020-04-26 00:51:25,221 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Etiam et orci non orci lobortis dictum id vitae massa. Aenean eu erat nulla. Sed posuere ullamcorper magna, tempor
2020-04-26 00:51:25,221 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ultrices justo feugiat rhoncus. Cras fringilla ligula nec euismod tristique. Duis vitae enim eget augue consectetur ultricies.
2020-04-26 00:51:25,221 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nam laoreet sapien at dictum consectetur. Suspendisse tristique purus neque, ut blandit nunc tincidunt et.
2020-04-26 00:51:25,222 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Duis pretium condimentum diam id viverra. Pellentesque sit amet dapibus eros, ac auctor lectus. Praesent eget tellus
2020-04-26 00:51:25,222 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> purus. Proin vel nisl sit amet orci laoreet faucibus eget eu nisi. Nulla id pharetra arcu. Lorem ipsum dolor sit amet,
2020-04-26 00:51:25,222 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> consectetur adipiscing elit. Vivamus ornare lectus eu metus venenatis, quis porttitor nibh convallis. Nulla nunc metus,
2020-04-26 00:51:25,222 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> tristique quis dui sed, interdum imperdiet nisl. Vestibulum mattis tincidunt lacus, imperdiet mattis libero varius rhoncus.
2020-04-26 00:51:25,222 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nam in auctor nisl. Nunc tincidunt accumsan pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 00:51:25,222 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> per inceptos himenaeos. Mauris luctus scelerisque augue, vel finibus ligula semper vel. Lorem ipsum dolor sit amet,
2020-04-26 00:51:25,223 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> consectetur adipiscing elit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.
2020-04-26 00:51:25,223 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nunc ultricies vel nunc eget mollis.
2020-04-26 00:51:25,223 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec ligula felis, ultrices vel blandit ut, hendrerit vel turpis. Duis faucibus dapibus mi ac semper. Duis id tortor tempus
2020-04-26 00:51:25,223 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> augue euismod tempus. Integer vehicula velit ut leo blandit sagittis. Vestibulum ante ipsum primis in faucibus orci luctus et
2020-04-26 00:51:25,223 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ultrices posuere cubilia Curae; Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis
2020-04-26 00:51:25,223 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> egestas. Nunc ut urna vel metus molestie venenatis nec non dui. Integer diam metus, aliquam a gravida et, varius id nulla.
2020-04-26 00:51:25,224 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nunc non porttitor ipsum. Aliquam sapien enim, eleifend nec nunc id, tempus tempus ex. Vivamus nec urna ornare,
2020-04-26 00:51:25,224 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> finibus leo at, posuere urna. Aenean est mi, porta ac gravida at, hendrerit quis elit. Quisque urna mauris, lobortis sit amet
2020-04-26 00:51:25,224 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> tortor eget, laoreet consectetur tortor. Suspendisse id imperdiet nisl, eget pellentesque tortor. Maecenas sit amet mi et ex
2020-04-26 00:51:25,224 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ornare porta sollicitudin vitae tellus. Donec nulla lorem, imperdiet non sodales vitae, congue quis sapien. Quisque nec
2020-04-26 00:51:25,224 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> mattis lacus. Sed dapibus nisi nec libero ornare, in accumsan dolor porttitor. Praesent sodales commodo ultricies.
2020-04-26 00:51:25,224 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Cras id ipsum vestibulum,
2020-04-26 00:51:25,224 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> venenatis eros vitae, maximus magna. Mauris eu blandit tortor, condimentum eleifend dolor.
2020-04-26 00:51:25,224 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Cras eu tellus feugiat, lobortis metus ac, consectetur orci. Phasellus bibendum tincidunt massa non venenatis. Nunc sed
2020-04-26 00:51:25,225 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> molestie metus, vel elementum tortor. Duis malesuada porta nisl ac molestie. In a tellus faucibus, convallis nunc nec,
2020-04-26 00:51:25,225 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sodales lacus. Donec vulputate interdum massa sed posuere. In dapibus eu ligula at sodales. Sed facilisis a sem eget
2020-04-26 00:51:25,225 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> lobortis. Ut viverra ipsum dictum pharetra auctor. Duis tincidunt nulla sapien, sit amet facilisis ante rhoncus eu. Aliquam
2020-04-26 00:51:25,225 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> luctus dolor tortor, vitae interdum felis elementum eget. Nam mattis leo gravida ex elementum, id facilisis lacus ornare.
2020-04-26 01:14:44,544 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication on 192-168-1-137.tpgi.com.au with PID 4873 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/classes started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 01:14:44,545 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 01:14:44,545 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: dev
2020-04-26 01:14:45,973 INFO com.counter.text.TextCounterSpringBootApplication [main] Started TextCounterSpringBootApplication in 1.663 seconds (JVM running for 2.024)
2020-04-26 01:14:45,978 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed suscipit metus, sit amet tristique purus. Etiam sit amet
2020-04-26 01:14:46,005 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> leo sollicitudin, tincidunt lectus vel, ultricies mauris. Donec ultrices lorem in est eleifend, et feugiat libero semper. Duis
2020-04-26 01:14:46,005 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sodales gravida sapien eget efficitur. Ut mattis mollis blandit. Duis nec metus gravida, posuere dolor id, pretium urna.
2020-04-26 01:14:46,005 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Aliquam vitae purus ex. Etiam vitae ipsum leo. Integer blandit, arcu eget commodo scelerisque, risus leo aliquet diam, in
2020-04-26 01:14:46,005 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sagittis metus ex sed elit. Duis vel urna non est fringilla rutrum. Ut molestie sed risus in pharetra. Maecenas eget ante at
2020-04-26 01:14:46,005 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> nulla feugiat euismod. Suspendisse pharetra porttitor lacus non tristique.
2020-04-26 01:14:46,005 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Vivamus varius posuere ligula. Nullam magna metus, elementum vel elementum eu, elementum non magna. Ut cursus
2020-04-26 01:14:46,005 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> arcu vel ligula mollis, in interdum velit maximus. Pellentesque arcu lorem, porttitor et quam vitae, imperdiet venenatis
2020-04-26 01:14:46,006 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> magna. Etiam imperdiet erat vel lectus rhoncus sollicitudin. Praesent at mi a est suscipit tempor sed eu diam. In hac
2020-04-26 01:14:46,006 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> habitasse platea dictumst. Morbi erat mi, iaculis id hendrerit a, sollicitudin et ligula. Vivamus justo nibh, cursus at ultricies
2020-04-26 01:14:46,006 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sed, varius iaculis enim.
2020-04-26 01:14:46,006 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec consequat luctus sapien, quis aliquam ante tristique sit amet. Pellentesque accumsan sollicitudin mi a blandit.
2020-04-26 01:14:46,006 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec ac dui bibendum, pharetra nulla vitae, iaculis purus. Donec fermentum porttitor mollis. Mauris cursus fringilla ex,
2020-04-26 01:14:46,006 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> eget ullamcorper ipsum lacinia in. Nam eget vehicula dui. In eget turpis convallis, ultrices neque vitae, interdum turpis.
2020-04-26 01:14:46,006 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nullam non aliquam sapien, eget volutpat elit. Cras pharetra ex a orci faucibus tristique at ullamcorper nibh. Proin nec
2020-04-26 01:14:46,006 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> lacinia ante, eu rutrum sem.
2020-04-26 01:14:46,006 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Curabitur id libero purus. Vivamus vel velit turpis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Donec
2020-04-26 01:14:46,007 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> at urna eget augue efficitur porttitor at eu elit. Fusce feugiat tempor nulla, at euismod lacus tincidunt sed. Curabitur
2020-04-26 01:14:46,007 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ullamcorper dignissim nisl, eget iaculis orci vestibulum sed. Ut consectetur consectetur urna vestibulum ultricies.
2020-04-26 01:14:46,007 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Maecenas non felis arcu. Fusce in tortor metus. Vestibulum vel felis ut lorem ultricies pretium quis ut metus. Aliquam erat
2020-04-26 01:14:46,007 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> volutpat. Praesent a lorem porttitor, venenatis nisl volutpat, placerat dui. Vivamus ut justo eu orci tincidunt malesuada.
2020-04-26 01:14:46,007 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Interdum et malesuada fames ac ante ipsum primis in faucibus. Etiam facilisis nulla vel leo pretium varius.
2020-04-26 01:14:46,007 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Fusce eleifend tincidunt lacinia. Duis maximus, sapien ac fringilla pretium, augue leo aliquam ligula, quis rutrum leo sem
2020-04-26 01:14:46,007 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> vel magna. Duis commodo lobortis dui, ut rhoncus dolor. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 01:14:46,007 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> per inceptos himenaeos. Nam nec augue augue. Quisque eu orci arcu. Aliquam neque odio, eleifend a dolor sed, dapibus
2020-04-26 01:14:46,007 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> auctor justo. Aliquam sollicitudin arcu sit amet odio gravida, nec viverra nulla efficitur. Phasellus sed libero rutrum lacus
2020-04-26 01:14:46,012 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sollicitudin mattis. Sed fermentum sapien ac dolor elementum, quis vehicula sem tempus.
2020-04-26 01:14:46,012 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Etiam et orci non orci lobortis dictum id vitae massa. Aenean eu erat nulla. Sed posuere ullamcorper magna, tempor
2020-04-26 01:14:46,013 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ultrices justo feugiat rhoncus. Cras fringilla ligula nec euismod tristique. Duis vitae enim eget augue consectetur ultricies.
2020-04-26 01:14:46,013 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nam laoreet sapien at dictum consectetur. Suspendisse tristique purus neque, ut blandit nunc tincidunt et.
2020-04-26 01:14:46,013 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Duis pretium condimentum diam id viverra. Pellentesque sit amet dapibus eros, ac auctor lectus. Praesent eget tellus
2020-04-26 01:14:46,013 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> purus. Proin vel nisl sit amet orci laoreet faucibus eget eu nisi. Nulla id pharetra arcu. Lorem ipsum dolor sit amet,
2020-04-26 01:14:46,013 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> consectetur adipiscing elit. Vivamus ornare lectus eu metus venenatis, quis porttitor nibh convallis. Nulla nunc metus,
2020-04-26 01:14:46,013 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> tristique quis dui sed, interdum imperdiet nisl. Vestibulum mattis tincidunt lacus, imperdiet mattis libero varius rhoncus.
2020-04-26 01:14:46,013 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nam in auctor nisl. Nunc tincidunt accumsan pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 01:14:46,013 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> per inceptos himenaeos. Mauris luctus scelerisque augue, vel finibus ligula semper vel. Lorem ipsum dolor sit amet,
2020-04-26 01:14:46,013 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> consectetur adipiscing elit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.
2020-04-26 01:14:46,013 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nunc ultricies vel nunc eget mollis.
2020-04-26 01:14:46,013 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec ligula felis, ultrices vel blandit ut, hendrerit vel turpis. Duis faucibus dapibus mi ac semper. Duis id tortor tempus
2020-04-26 01:14:46,014 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> augue euismod tempus. Integer vehicula velit ut leo blandit sagittis. Vestibulum ante ipsum primis in faucibus orci luctus et
2020-04-26 01:14:46,014 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ultrices posuere cubilia Curae; Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis
2020-04-26 01:14:46,014 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> egestas. Nunc ut urna vel metus molestie venenatis nec non dui. Integer diam metus, aliquam a gravida et, varius id nulla.
2020-04-26 01:14:46,014 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nunc non porttitor ipsum. Aliquam sapien enim, eleifend nec nunc id, tempus tempus ex. Vivamus nec urna ornare,
2020-04-26 01:14:46,014 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> finibus leo at, posuere urna. Aenean est mi, porta ac gravida at, hendrerit quis elit. Quisque urna mauris, lobortis sit amet
2020-04-26 01:14:46,014 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> tortor eget, laoreet consectetur tortor. Suspendisse id imperdiet nisl, eget pellentesque tortor. Maecenas sit amet mi et ex
2020-04-26 01:14:46,014 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ornare porta sollicitudin vitae tellus. Donec nulla lorem, imperdiet non sodales vitae, congue quis sapien. Quisque nec
2020-04-26 01:14:46,014 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> mattis lacus. Sed dapibus nisi nec libero ornare, in accumsan dolor porttitor. Praesent sodales commodo ultricies.
2020-04-26 01:14:46,014 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Cras id ipsum vestibulum,
2020-04-26 01:14:46,014 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> venenatis eros vitae, maximus magna. Mauris eu blandit tortor, condimentum eleifend dolor.
2020-04-26 01:14:46,014 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Cras eu tellus feugiat, lobortis metus ac, consectetur orci. Phasellus bibendum tincidunt massa non venenatis. Nunc sed
2020-04-26 01:14:46,015 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> molestie metus, vel elementum tortor. Duis malesuada porta nisl ac molestie. In a tellus faucibus, convallis nunc nec,
2020-04-26 01:14:46,015 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sodales lacus. Donec vulputate interdum massa sed posuere. In dapibus eu ligula at sodales. Sed facilisis a sem eget
2020-04-26 01:14:46,015 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> lobortis. Ut viverra ipsum dictum pharetra auctor. Duis tincidunt nulla sapien, sit amet facilisis ante rhoncus eu. Aliquam
2020-04-26 01:14:46,015 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> luctus dolor tortor, vitae interdum felis elementum eget. Nam mattis leo gravida ex elementum, id facilisis lacus ornare.
2020-04-26 01:17:23,215 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Paragraphs
2020-04-26 01:17:23,216 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> What this handout is about
2020-04-26 01:17:23,216 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> This handout will help you understand how paragraphs are formed, how to develop stronger paragraphs, and how to completely and clearly express your ideas.
2020-04-26 01:17:23,216 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,216 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> What is a paragraph?
2020-04-26 01:17:23,216 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Paragraphs are the building blocks of papers. Many students define paragraphs in terms of length: a paragraph is a group of at least five sentences, a paragraph is half a page long, etc. In reality, though, the unity and coherence of ideas among sentences is what constitutes a paragraph. A paragraph is defined as “a group of sentences or a single sentence that forms a unit” (Lunsford and Connors 116). Length and appearance do not determine whether a section in a paper is a paragraph. For instance, in some styles of writing, particularly journalistic styles, a paragraph can be just one sentence long. Ultimately, a paragraph is a sentence or group of sentences that support one main idea. In this handout, we will refer to this as the “controlling idea,” because it controls what happens in the rest of the paragraph.
2020-04-26 01:17:23,217 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,217 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> How do I decide what to put in a paragraph?
2020-04-26 01:17:23,217 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Before you can begin to determine what the composition of a particular paragraph will be, you must first decide on an argument and a working thesis statement for your paper. What is the most important idea that you are trying to convey to your reader? The information in each paragraph must be related to that idea. In other words, your paragraphs should remind your reader that there is a recurrent relationship between your thesis and the information in each paragraph. A working thesis functions like a seed from which your paper, and your ideas, will grow. The whole process is an organic one—a natural progression from a seed to a full-blown paper where there are direct, familial relationships between all of the ideas in the paper.
2020-04-26 01:17:23,218 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,218 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> The decision about what to put into your paragraphs begins with the germination of a seed of ideas; this “germination process” is better known as brainstorming. There are many techniques for brainstorming; whichever one you choose, this stage of paragraph development cannot be skipped. Building paragraphs can be like building a skyscraper: there must be a well-planned foundation that supports what you are building. Any cracks, inconsistencies, or other corruptions of the foundation can cause your whole paper to crumble.
2020-04-26 01:17:23,218 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,218 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> So, let’s suppose that you have done some brainstorming to develop your thesis. What else should you keep in mind as you begin to create paragraphs? Every paragraph in a paper should be:
2020-04-26 01:17:23,218 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,219 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Unified: All of the sentences in a single paragraph should be related to a single controlling idea (often expressed in the topic sentence of the paragraph).
2020-04-26 01:17:23,219 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Clearly related to the thesis: The sentences should all refer to the central idea, or thesis, of the paper (Rosen and Behrens 119).
2020-04-26 01:17:23,219 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Coherent: The sentences should be arranged in a logical manner and should follow a definite plan for development (Rosen and Behrens 119).
2020-04-26 01:17:23,219 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Well-developed: Every idea discussed in the paragraph should be adequately explained and supported through evidence and details that work together to explain the paragraph’s controlling idea (Rosen and Behrens 119).
2020-04-26 01:17:23,219 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> How do I organize a paragraph?
2020-04-26 01:17:23,219 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> There are many different ways to organize a paragraph. The organization you choose will depend on the controlling idea of the paragraph. Below are a few possibilities for organization, with links to brief examples:
2020-04-26 01:17:23,219 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,219 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Narration: Tell a story. Go chronologically, from start to finish. (See an example.)
2020-04-26 01:17:23,219 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Description: Provide specific details about what something looks, smells, tastes, sounds, or feels like. Organize spatially, in order of appearance, or by topic. (See an example.)
2020-04-26 01:17:23,219 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Process: Explain how something works, step by step. Perhaps follow a sequence—first, second, third. (See an example.)
2020-04-26 01:17:23,220 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Classification: Separate into groups or explain the various parts of a topic. (See an example.)
2020-04-26 01:17:23,220 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Illustration: Give examples and explain how those examples prove your point. (See the detailed example in the next section of this handout.)
2020-04-26 01:17:23,220 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 5-step process to paragraph development
2020-04-26 01:17:23,220 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Let’s walk through a 5-step process for building a paragraph. For each step there is an explanation and example. Our example paragraph will be about slave spirituals, the original songs that African Americans created during slavery. The model paragraph uses illustration (giving examples) to prove its point.
2020-04-26 01:17:23,220 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,220 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Step 1. Decide on a controlling idea and create a topic sentence
2020-04-26 01:17:23,221 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Paragraph development begins with the formulation of the controlling idea. This idea directs the paragraph’s development. Often, the controlling idea of a paragraph will appear in the form of a topic sentence. In some cases, you may need more than one sentence to express a paragraph’s controlling idea. Here is the controlling idea for our “model paragraph,” expressed in a topic sentence:
2020-04-26 01:17:23,221 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,221 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model controlling idea and topic sentence — Slave spirituals often had hidden double meanings.
2020-04-26 01:17:23,221 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Step 2. Explain the controlling idea
2020-04-26 01:17:23,221 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Paragraph development continues with an expression of the rationale or the explanation that the writer gives for how the reader should interpret the information presented in the idea statement or topic sentence of the paragraph. The writer explains his/her thinking about the main topic, idea, or focus of the paragraph. Here’s the sentence that would follow the controlling idea about slave spirituals:
2020-04-26 01:17:23,222 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,222 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model explanation — On one level, spirituals referenced heaven, Jesus, and the soul; but on another level, the songs spoke about slave resistance.
2020-04-26 01:17:23,222 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Step 3. Give an example (or multiple examples)
2020-04-26 01:17:23,222 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Paragraph development progresses with the expression of some type of support or evidence for the idea and the explanation that came before it. The example serves as a sign or representation of the relationship established in the idea and explanation portions of the paragraph. Here are two examples that we could use to illustrate the double meanings in slave spirituals:
2020-04-26 01:17:23,222 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,222 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model example A — For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.”
2020-04-26 01:17:23,222 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model example B — Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings.
2020-04-26 01:17:23,223 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Step 4. Explain the example(s)
2020-04-26 01:17:23,223 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> The next movement in paragraph development is an explanation of each example and its relevance to the topic sentence and rationale that were stated at the beginning of the paragraph. This explanation shows readers why you chose to use this/or these particular examples as evidence to support the major claim, or focus, in your paragraph.
2020-04-26 01:17:23,223 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,223 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Continue the pattern of giving examples and explaining them until all points/examples that the writer deems necessary have been made and explained. NONE of your examples should be left unexplained. You might be able to explain the relationship between the example and the topic sentence in the same sentence which introduced the example. More often, however, you will need to explain that relationship in a separate sentence. Look at these explanations for the two examples in the slave spirituals paragraph:
2020-04-26 01:17:23,223 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,223 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model explanation for example A — When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North.
2020-04-26 01:17:23,224 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model explanation for example B — [The relationship between example B and the main idea of the paragraph’s controlling idea is clear enough without adding another sentence to explain it.]
2020-04-26 01:17:23,224 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Step 5. Complete the paragraph’s idea or transition into the next paragraph
2020-04-26 01:17:23,224 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> The final movement in paragraph development involves tying up the loose ends of the paragraph and reminding the reader of the relevance of the information in this paragraph to the main or controlling idea of the paper. At this point, you can remind your reader about the relevance of the information that you just discussed in the paragraph. You might feel more comfortable, however, simply transitioning your reader to the next development in the next paragraph. Here’s an example of a sentence that completes the slave spirituals paragraph:
2020-04-26 01:17:23,225 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,225 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model sentence for completing a paragraph — What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 01:17:23,225 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Notice that the example and explanation steps of this 5-step process (steps 3 and 4) can be repeated as needed. The idea is that you continue to use this pattern until you have completely developed the main idea of the paragraph.
2020-04-26 01:17:23,225 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,225 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Here is a look at the completed “model” paragraph:
2020-04-26 01:17:23,225 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Slave spirituals often had hidden double meanings. On one level, spirituals referenced heaven, Jesus, and the soul, but on another level, the songs spoke about slave resistance. For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.” When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North. Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings. What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 01:17:23,226 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Troubleshooting paragraphs
2020-04-26 01:17:23,226 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Problem: the paragraph has no topic sentence
2020-04-26 01:17:23,226 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Imagine each paragraph as a sandwich. The real content of the sandwich—the meat or other filling—is in the middle. It includes all the evidence you need to make the point. But it gets kind of messy to eat a sandwich without any bread. Your readers don’t know what to do with all the evidence you’ve given them. So, the top slice of bread (the first sentence of the paragraph) explains the topic (or controlling idea) of the paragraph. And, the bottom slice (the last sentence of the paragraph) tells the reader how the paragraph relates to the broader argument. In the original and revised paragraphs below, notice how a topic sentence expressing the controlling idea tells the reader the point of all the evidence.
2020-04-26 01:17:23,227 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,227 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Original paragraph
2020-04-26 01:17:23,227 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:17:23,227 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Revised paragraph
2020-04-26 01:17:23,227 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:17:23,228 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Once you have mastered the use of topic sentences, you may decide that the topic sentence for a particular paragraph really shouldn’t be the first sentence of the paragraph. This is fine—the topic sentence can actually go at the beginning, middle, or end of a paragraph; what’s important is that it is in there somewhere so that readers know what the main idea of the paragraph is and how it relates back to the thesis of your paper. Suppose that we wanted to start the piranha paragraph with a transition sentence—something that reminds the reader of what happened in the previous paragraph—rather than with the topic sentence. Let’s suppose that the previous paragraph was about all kinds of animals that people are afraid of, like sharks, snakes, and spiders. Our paragraph might look like this (the topic sentence is bold):
2020-04-26 01:17:23,228 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,228 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Like sharks, snakes, and spiders, pirahnas are widely feared. Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:17:23,228 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Problem: the paragraph has more than one controlling idea
2020-04-26 01:17:23,229 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> If a paragraph has more than one main idea, consider eliminating sentences that relate to the second idea, or split the paragraph into two or more paragraphs, each with only one main idea. Watch our short video on reverse outlining to learn a quick way to test whether your paragraphs are unified. In the following paragraph, the final two sentences branch off into a different topic; so, the revised paragraph eliminates them and concludes with a sentence that reminds the reader of the paragraph’s main idea.
2020-04-26 01:17:23,229 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,229 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Original paragraph
2020-04-26 01:17:23,229 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,229 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. A number of South American groups eat piranhas. They fry or grill the fish and then serve them with coconut milk or tucupi, a sauce made from fermented manioc juices.
2020-04-26 01:17:23,230 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Revised paragraph
2020-04-26 01:17:23,230 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,230 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:17:23,230 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Problem: transitions are needed within the paragraph
2020-04-26 01:17:23,230 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> You are probably familiar with the idea that transitions may be needed between paragraphs or sections in a paper (see our handout on transitions). Sometimes they are also helpful within the body of a single paragraph. Within a paragraph, transitions are often single words or short phrases that help to establish relationships between ideas and to create a logical progression of those ideas in a paragraph. This is especially likely to be true within paragraphs that discuss multiple examples. Let’s take a look at a version of our piranha paragraph that uses transitions to orient the reader:
2020-04-26 01:17:23,231 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,231 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, except in two main situations, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ instinct is to flee, not attack. But there are two situations in which a piranha bite is likely. The first is when a frightened piranha is lifted out of the water—for example, if it has been caught in a fishing net. The second is when the water level in pools where piranhas are living falls too low. A large number of fish may be trapped in a single pool, and if they are hungry, they may attack anything that enters the water.
2020-04-26 01:17:23,231 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> In this example, you can see how the phrases “the first” and “the second” help the reader follow the organization of the ideas in the paragraph.
2020-04-26 01:17:23,231 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,231 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Works consulted
2020-04-26 01:17:23,232 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> We consulted these works while writing this handout. This is not a comprehensive list of resources on the handout’s topic, and we encourage you to do your own research to find the latest publications on this topic. Please do not use this list as a model for the format of your own reference list, as it may not match the citation style you are using. For guidance on formatting citations, please see the UNC Libraries citation tutorial. We revise these tips periodically and welcome feedback.
2020-04-26 01:17:23,232 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,232 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Lunsford, Andrea. The St. Martin’s Handbook, Annotated Instructor’s Edition. 6th Ed. New York: St. Martin’s, 2008.
2020-04-26 01:17:23,232 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:17:23,232 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Rosen, Leonard and Laurence Behrens. The Allyn and Bacon Handbook, Annotated Instructor’s Edition. 4th Ed. Boston: Allyn and Bacon, 2000.
2020-04-26 01:46:30,245 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication on 192-168-1-137.tpgi.com.au with PID 5179 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/classes started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 01:46:30,246 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 01:46:30,246 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: dev
2020-04-26 01:46:31,667 INFO com.counter.text.TextCounterSpringBootApplication [main] Started TextCounterSpringBootApplication in 1.647 seconds (JVM running for 1.979)
2020-04-26 01:46:31,671 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Paragraphs
2020-04-26 01:46:31,698 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> What this handout is about
2020-04-26 01:46:31,699 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> This handout will help you understand how paragraphs are formed, how to develop stronger paragraphs, and how to completely and clearly express your ideas.
2020-04-26 01:46:31,699 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,699 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> What is a paragraph?
2020-04-26 01:46:31,699 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Paragraphs are the building blocks of papers. Many students define paragraphs in terms of length: a paragraph is a group of at least five sentences, a paragraph is half a page long, etc. In reality, though, the unity and coherence of ideas among sentences is what constitutes a paragraph. A paragraph is defined as “a group of sentences or a single sentence that forms a unit” (Lunsford and Connors 116). Length and appearance do not determine whether a section in a paper is a paragraph. For instance, in some styles of writing, particularly journalistic styles, a paragraph can be just one sentence long. Ultimately, a paragraph is a sentence or group of sentences that support one main idea. In this handout, we will refer to this as the “controlling idea,” because it controls what happens in the rest of the paragraph.
2020-04-26 01:46:31,699 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,700 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> How do I decide what to put in a paragraph?
2020-04-26 01:46:31,700 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Before you can begin to determine what the composition of a particular paragraph will be, you must first decide on an argument and a working thesis statement for your paper. What is the most important idea that you are trying to convey to your reader? The information in each paragraph must be related to that idea. In other words, your paragraphs should remind your reader that there is a recurrent relationship between your thesis and the information in each paragraph. A working thesis functions like a seed from which your paper, and your ideas, will grow. The whole process is an organic one—a natural progression from a seed to a full-blown paper where there are direct, familial relationships between all of the ideas in the paper.
2020-04-26 01:46:31,700 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,700 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> The decision about what to put into your paragraphs begins with the germination of a seed of ideas; this “germination process” is better known as brainstorming. There are many techniques for brainstorming; whichever one you choose, this stage of paragraph development cannot be skipped. Building paragraphs can be like building a skyscraper: there must be a well-planned foundation that supports what you are building. Any cracks, inconsistencies, or other corruptions of the foundation can cause your whole paper to crumble.
2020-04-26 01:46:31,700 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,700 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> So, let’s suppose that you have done some brainstorming to develop your thesis. What else should you keep in mind as you begin to create paragraphs? Every paragraph in a paper should be:
2020-04-26 01:46:31,701 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,701 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Unified: All of the sentences in a single paragraph should be related to a single controlling idea (often expressed in the topic sentence of the paragraph).
2020-04-26 01:46:31,701 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Clearly related to the thesis: The sentences should all refer to the central idea, or thesis, of the paper (Rosen and Behrens 119).
2020-04-26 01:46:31,701 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Coherent: The sentences should be arranged in a logical manner and should follow a definite plan for development (Rosen and Behrens 119).
2020-04-26 01:46:31,701 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Well-developed: Every idea discussed in the paragraph should be adequately explained and supported through evidence and details that work together to explain the paragraph’s controlling idea (Rosen and Behrens 119).
2020-04-26 01:46:31,701 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> How do I organize a paragraph?
2020-04-26 01:46:31,701 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> There are many different ways to organize a paragraph. The organization you choose will depend on the controlling idea of the paragraph. Below are a few possibilities for organization, with links to brief examples:
2020-04-26 01:46:31,701 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,701 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Narration: Tell a story. Go chronologically, from start to finish. (See an example.)
2020-04-26 01:46:31,702 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Description: Provide specific details about what something looks, smells, tastes, sounds, or feels like. Organize spatially, in order of appearance, or by topic. (See an example.)
2020-04-26 01:46:31,702 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Process: Explain how something works, step by step. Perhaps follow a sequence—first, second, third. (See an example.)
2020-04-26 01:46:31,707 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Classification: Separate into groups or explain the various parts of a topic. (See an example.)
2020-04-26 01:46:31,707 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Illustration: Give examples and explain how those examples prove your point. (See the detailed example in the next section of this handout.)
2020-04-26 01:46:31,707 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 5-step process to paragraph development
2020-04-26 01:46:31,707 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Let’s walk through a 5-step process for building a paragraph. For each step there is an explanation and example. Our example paragraph will be about slave spirituals, the original songs that African Americans created during slavery. The model paragraph uses illustration (giving examples) to prove its point.
2020-04-26 01:46:31,707 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,707 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Step 1. Decide on a controlling idea and create a topic sentence
2020-04-26 01:46:31,707 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Paragraph development begins with the formulation of the controlling idea. This idea directs the paragraph’s development. Often, the controlling idea of a paragraph will appear in the form of a topic sentence. In some cases, you may need more than one sentence to express a paragraph’s controlling idea. Here is the controlling idea for our “model paragraph,” expressed in a topic sentence:
2020-04-26 01:46:31,707 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,707 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model controlling idea and topic sentence — Slave spirituals often had hidden double meanings.
2020-04-26 01:46:31,708 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Step 2. Explain the controlling idea
2020-04-26 01:46:31,708 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Paragraph development continues with an expression of the rationale or the explanation that the writer gives for how the reader should interpret the information presented in the idea statement or topic sentence of the paragraph. The writer explains his/her thinking about the main topic, idea, or focus of the paragraph. Here’s the sentence that would follow the controlling idea about slave spirituals:
2020-04-26 01:46:31,708 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,708 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model explanation — On one level, spirituals referenced heaven, Jesus, and the soul; but on another level, the songs spoke about slave resistance.
2020-04-26 01:46:31,708 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Step 3. Give an example (or multiple examples)
2020-04-26 01:46:31,708 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Paragraph development progresses with the expression of some type of support or evidence for the idea and the explanation that came before it. The example serves as a sign or representation of the relationship established in the idea and explanation portions of the paragraph. Here are two examples that we could use to illustrate the double meanings in slave spirituals:
2020-04-26 01:46:31,708 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,709 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model example A — For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.”
2020-04-26 01:46:31,709 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model example B — Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings.
2020-04-26 01:46:31,709 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Step 4. Explain the example(s)
2020-04-26 01:46:31,709 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> The next movement in paragraph development is an explanation of each example and its relevance to the topic sentence and rationale that were stated at the beginning of the paragraph. This explanation shows readers why you chose to use this/or these particular examples as evidence to support the major claim, or focus, in your paragraph.
2020-04-26 01:46:31,709 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,709 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Continue the pattern of giving examples and explaining them until all points/examples that the writer deems necessary have been made and explained. NONE of your examples should be left unexplained. You might be able to explain the relationship between the example and the topic sentence in the same sentence which introduced the example. More often, however, you will need to explain that relationship in a separate sentence. Look at these explanations for the two examples in the slave spirituals paragraph:
2020-04-26 01:46:31,710 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,710 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model explanation for example A — When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North.
2020-04-26 01:46:31,710 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model explanation for example B — [The relationship between example B and the main idea of the paragraph’s controlling idea is clear enough without adding another sentence to explain it.]
2020-04-26 01:46:31,710 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Step 5. Complete the paragraph’s idea or transition into the next paragraph
2020-04-26 01:46:31,711 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> The final movement in paragraph development involves tying up the loose ends of the paragraph and reminding the reader of the relevance of the information in this paragraph to the main or controlling idea of the paper. At this point, you can remind your reader about the relevance of the information that you just discussed in the paragraph. You might feel more comfortable, however, simply transitioning your reader to the next development in the next paragraph. Here’s an example of a sentence that completes the slave spirituals paragraph:
2020-04-26 01:46:31,711 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,711 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model sentence for completing a paragraph — What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 01:46:31,711 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Notice that the example and explanation steps of this 5-step process (steps 3 and 4) can be repeated as needed. The idea is that you continue to use this pattern until you have completely developed the main idea of the paragraph.
2020-04-26 01:46:31,712 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,712 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Here is a look at the completed “model” paragraph:
2020-04-26 01:46:31,712 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Slave spirituals often had hidden double meanings. On one level, spirituals referenced heaven, Jesus, and the soul, but on another level, the songs spoke about slave resistance. For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.” When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North. Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings. What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 01:46:31,712 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Troubleshooting paragraphs
2020-04-26 01:46:31,712 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Problem: the paragraph has no topic sentence
2020-04-26 01:46:31,712 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Imagine each paragraph as a sandwich. The real content of the sandwich—the meat or other filling—is in the middle. It includes all the evidence you need to make the point. But it gets kind of messy to eat a sandwich without any bread. Your readers don’t know what to do with all the evidence you’ve given them. So, the top slice of bread (the first sentence of the paragraph) explains the topic (or controlling idea) of the paragraph. And, the bottom slice (the last sentence of the paragraph) tells the reader how the paragraph relates to the broader argument. In the original and revised paragraphs below, notice how a topic sentence expressing the controlling idea tells the reader the point of all the evidence.
2020-04-26 01:46:31,712 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,713 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Original paragraph
2020-04-26 01:46:31,713 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:46:31,713 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Revised paragraph
2020-04-26 01:46:31,713 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:46:31,713 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Once you have mastered the use of topic sentences, you may decide that the topic sentence for a particular paragraph really shouldn’t be the first sentence of the paragraph. This is fine—the topic sentence can actually go at the beginning, middle, or end of a paragraph; what’s important is that it is in there somewhere so that readers know what the main idea of the paragraph is and how it relates back to the thesis of your paper. Suppose that we wanted to start the piranha paragraph with a transition sentence—something that reminds the reader of what happened in the previous paragraph—rather than with the topic sentence. Let’s suppose that the previous paragraph was about all kinds of animals that people are afraid of, like sharks, snakes, and spiders. Our paragraph might look like this (the topic sentence is bold):
2020-04-26 01:46:31,713 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,713 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Like sharks, snakes, and spiders, pirahnas are widely feared. Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:46:31,713 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Problem: the paragraph has more than one controlling idea
2020-04-26 01:46:31,714 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> If a paragraph has more than one main idea, consider eliminating sentences that relate to the second idea, or split the paragraph into two or more paragraphs, each with only one main idea. Watch our short video on reverse outlining to learn a quick way to test whether your paragraphs are unified. In the following paragraph, the final two sentences branch off into a different topic; so, the revised paragraph eliminates them and concludes with a sentence that reminds the reader of the paragraph’s main idea.
2020-04-26 01:46:31,714 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,714 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Original paragraph
2020-04-26 01:46:31,714 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,714 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. A number of South American groups eat piranhas. They fry or grill the fish and then serve them with coconut milk or tucupi, a sauce made from fermented manioc juices.
2020-04-26 01:46:31,714 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Revised paragraph
2020-04-26 01:46:31,714 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,714 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:46:31,714 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Problem: transitions are needed within the paragraph
2020-04-26 01:46:31,715 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> You are probably familiar with the idea that transitions may be needed between paragraphs or sections in a paper (see our handout on transitions). Sometimes they are also helpful within the body of a single paragraph. Within a paragraph, transitions are often single words or short phrases that help to establish relationships between ideas and to create a logical progression of those ideas in a paragraph. This is especially likely to be true within paragraphs that discuss multiple examples. Let’s take a look at a version of our piranha paragraph that uses transitions to orient the reader:
2020-04-26 01:46:31,715 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,715 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, except in two main situations, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ instinct is to flee, not attack. But there are two situations in which a piranha bite is likely. The first is when a frightened piranha is lifted out of the water—for example, if it has been caught in a fishing net. The second is when the water level in pools where piranhas are living falls too low. A large number of fish may be trapped in a single pool, and if they are hungry, they may attack anything that enters the water.
2020-04-26 01:46:31,715 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> In this example, you can see how the phrases “the first” and “the second” help the reader follow the organization of the ideas in the paragraph.
2020-04-26 01:46:31,715 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,715 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Works consulted
2020-04-26 01:46:31,715 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> We consulted these works while writing this handout. This is not a comprehensive list of resources on the handout’s topic, and we encourage you to do your own research to find the latest publications on this topic. Please do not use this list as a model for the format of your own reference list, as it may not match the citation style you are using. For guidance on formatting citations, please see the UNC Libraries citation tutorial. We revise these tips periodically and welcome feedback.
2020-04-26 01:46:31,716 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,716 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Lunsford, Andrea. The St. Martin’s Handbook, Annotated Instructor’s Edition. 6th Ed. New York: St. Martin’s, 2008.
2020-04-26 01:46:31,716 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 01:46:31,716 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Rosen, Leonard and Laurence Behrens. The Allyn and Bacon Handbook, Annotated Instructor’s Edition. 4th Ed. Boston: Allyn and Bacon, 2000.
2020-04-26 01:49:38,370 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Paragraphs
2020-04-26 01:49:38,370 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> What this handout is about
2020-04-26 01:49:38,370 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> This handout will help you understand how paragraphs are formed, how to develop stronger paragraphs, and how to completely and clearly express your ideas.
2020-04-26 01:49:38,370 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,371 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> What is a paragraph?
2020-04-26 01:49:38,371 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Paragraphs are the building blocks of papers. Many students define paragraphs in terms of length: a paragraph is a group of at least five sentences, a paragraph is half a page long, etc. In reality, though, the unity and coherence of ideas among sentences is what constitutes a paragraph. A paragraph is defined as “a group of sentences or a single sentence that forms a unit” (Lunsford and Connors 116). Length and appearance do not determine whether a section in a paper is a paragraph. For instance, in some styles of writing, particularly journalistic styles, a paragraph can be just one sentence long. Ultimately, a paragraph is a sentence or group of sentences that support one main idea. In this handout, we will refer to this as the “controlling idea,” because it controls what happens in the rest of the paragraph.
2020-04-26 01:49:38,371 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,371 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> How do I decide what to put in a paragraph?
2020-04-26 01:49:38,372 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Before you can begin to determine what the composition of a particular paragraph will be, you must first decide on an argument and a working thesis statement for your paper. What is the most important idea that you are trying to convey to your reader? The information in each paragraph must be related to that idea. In other words, your paragraphs should remind your reader that there is a recurrent relationship between your thesis and the information in each paragraph. A working thesis functions like a seed from which your paper, and your ideas, will grow. The whole process is an organic one—a natural progression from a seed to a full-blown paper where there are direct, familial relationships between all of the ideas in the paper.
2020-04-26 01:49:38,372 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,372 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> The decision about what to put into your paragraphs begins with the germination of a seed of ideas; this “germination process” is better known as brainstorming. There are many techniques for brainstorming; whichever one you choose, this stage of paragraph development cannot be skipped. Building paragraphs can be like building a skyscraper: there must be a well-planned foundation that supports what you are building. Any cracks, inconsistencies, or other corruptions of the foundation can cause your whole paper to crumble.
2020-04-26 01:49:38,372 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,372 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> So, let’s suppose that you have done some brainstorming to develop your thesis. What else should you keep in mind as you begin to create paragraphs? Every paragraph in a paper should be:
2020-04-26 01:49:38,372 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,372 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Unified: All of the sentences in a single paragraph should be related to a single controlling idea (often expressed in the topic sentence of the paragraph).
2020-04-26 01:49:38,372 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Clearly related to the thesis: The sentences should all refer to the central idea, or thesis, of the paper (Rosen and Behrens 119).
2020-04-26 01:49:38,372 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Coherent: The sentences should be arranged in a logical manner and should follow a definite plan for development (Rosen and Behrens 119).
2020-04-26 01:49:38,373 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Well-developed: Every idea discussed in the paragraph should be adequately explained and supported through evidence and details that work together to explain the paragraph’s controlling idea (Rosen and Behrens 119).
2020-04-26 01:49:38,373 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> How do I organize a paragraph?
2020-04-26 01:49:38,373 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> There are many different ways to organize a paragraph. The organization you choose will depend on the controlling idea of the paragraph. Below are a few possibilities for organization, with links to brief examples:
2020-04-26 01:49:38,373 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,373 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Narration: Tell a story. Go chronologically, from start to finish. (See an example.)
2020-04-26 01:49:38,373 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Description: Provide specific details about what something looks, smells, tastes, sounds, or feels like. Organize spatially, in order of appearance, or by topic. (See an example.)
2020-04-26 01:49:38,373 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Process: Explain how something works, step by step. Perhaps follow a sequence—first, second, third. (See an example.)
2020-04-26 01:49:38,373 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Classification: Separate into groups or explain the various parts of a topic. (See an example.)
2020-04-26 01:49:38,373 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Illustration: Give examples and explain how those examples prove your point. (See the detailed example in the next section of this handout.)
2020-04-26 01:49:38,373 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 5-step process to paragraph development
2020-04-26 01:49:38,373 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Let’s walk through a 5-step process for building a paragraph. For each step there is an explanation and example. Our example paragraph will be about slave spirituals, the original songs that African Americans created during slavery. The model paragraph uses illustration (giving examples) to prove its point.
2020-04-26 01:49:38,374 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,374 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Step 1. Decide on a controlling idea and create a topic sentence
2020-04-26 01:49:38,374 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Paragraph development begins with the formulation of the controlling idea. This idea directs the paragraph’s development. Often, the controlling idea of a paragraph will appear in the form of a topic sentence. In some cases, you may need more than one sentence to express a paragraph’s controlling idea. Here is the controlling idea for our “model paragraph,” expressed in a topic sentence:
2020-04-26 01:49:38,374 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,374 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model controlling idea and topic sentence — Slave spirituals often had hidden double meanings.
2020-04-26 01:49:38,375 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Step 2. Explain the controlling idea
2020-04-26 01:49:38,375 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Paragraph development continues with an expression of the rationale or the explanation that the writer gives for how the reader should interpret the information presented in the idea statement or topic sentence of the paragraph. The writer explains his/her thinking about the main topic, idea, or focus of the paragraph. Here’s the sentence that would follow the controlling idea about slave spirituals:
2020-04-26 01:49:38,375 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,375 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model explanation — On one level, spirituals referenced heaven, Jesus, and the soul; but on another level, the songs spoke about slave resistance.
2020-04-26 01:49:38,375 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Step 3. Give an example (or multiple examples)
2020-04-26 01:49:38,375 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Paragraph development progresses with the expression of some type of support or evidence for the idea and the explanation that came before it. The example serves as a sign or representation of the relationship established in the idea and explanation portions of the paragraph. Here are two examples that we could use to illustrate the double meanings in slave spirituals:
2020-04-26 01:49:38,376 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,376 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model example A — For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.”
2020-04-26 01:49:38,376 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model example B — Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings.
2020-04-26 01:49:38,376 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Step 4. Explain the example(s)
2020-04-26 01:49:38,376 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> The next movement in paragraph development is an explanation of each example and its relevance to the topic sentence and rationale that were stated at the beginning of the paragraph. This explanation shows readers why you chose to use this/or these particular examples as evidence to support the major claim, or focus, in your paragraph.
2020-04-26 01:49:38,376 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,376 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Continue the pattern of giving examples and explaining them until all points/examples that the writer deems necessary have been made and explained. NONE of your examples should be left unexplained. You might be able to explain the relationship between the example and the topic sentence in the same sentence which introduced the example. More often, however, you will need to explain that relationship in a separate sentence. Look at these explanations for the two examples in the slave spirituals paragraph:
2020-04-26 01:49:38,376 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,377 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model explanation for example A — When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North.
2020-04-26 01:49:38,377 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model explanation for example B — [The relationship between example B and the main idea of the paragraph’s controlling idea is clear enough without adding another sentence to explain it.]
2020-04-26 01:49:38,377 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Step 5. Complete the paragraph’s idea or transition into the next paragraph
2020-04-26 01:49:38,377 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> The final movement in paragraph development involves tying up the loose ends of the paragraph and reminding the reader of the relevance of the information in this paragraph to the main or controlling idea of the paper. At this point, you can remind your reader about the relevance of the information that you just discussed in the paragraph. You might feel more comfortable, however, simply transitioning your reader to the next development in the next paragraph. Here’s an example of a sentence that completes the slave spirituals paragraph:
2020-04-26 01:49:38,377 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,377 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Model sentence for completing a paragraph — What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 01:49:38,377 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Notice that the example and explanation steps of this 5-step process (steps 3 and 4) can be repeated as needed. The idea is that you continue to use this pattern until you have completely developed the main idea of the paragraph.
2020-04-26 01:49:38,377 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,378 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Here is a look at the completed “model” paragraph:
2020-04-26 01:49:38,378 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Slave spirituals often had hidden double meanings. On one level, spirituals referenced heaven, Jesus, and the soul, but on another level, the songs spoke about slave resistance. For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.” When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North. Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings. What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 01:49:38,378 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Troubleshooting paragraphs
2020-04-26 01:49:38,378 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Problem: the paragraph has no topic sentence
2020-04-26 01:49:38,378 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Imagine each paragraph as a sandwich. The real content of the sandwich—the meat or other filling—is in the middle. It includes all the evidence you need to make the point. But it gets kind of messy to eat a sandwich without any bread. Your readers don’t know what to do with all the evidence you’ve given them. So, the top slice of bread (the first sentence of the paragraph) explains the topic (or controlling idea) of the paragraph. And, the bottom slice (the last sentence of the paragraph) tells the reader how the paragraph relates to the broader argument. In the original and revised paragraphs below, notice how a topic sentence expressing the controlling idea tells the reader the point of all the evidence.
2020-04-26 01:49:38,378 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,378 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Original paragraph
2020-04-26 01:49:38,378 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:49:38,378 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Revised paragraph
2020-04-26 01:49:38,378 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:49:38,379 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Once you have mastered the use of topic sentences, you may decide that the topic sentence for a particular paragraph really shouldn’t be the first sentence of the paragraph. This is fine—the topic sentence can actually go at the beginning, middle, or end of a paragraph; what’s important is that it is in there somewhere so that readers know what the main idea of the paragraph is and how it relates back to the thesis of your paper. Suppose that we wanted to start the piranha paragraph with a transition sentence—something that reminds the reader of what happened in the previous paragraph—rather than with the topic sentence. Let’s suppose that the previous paragraph was about all kinds of animals that people are afraid of, like sharks, snakes, and spiders. Our paragraph might look like this (the topic sentence is bold):
2020-04-26 01:49:38,379 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,379 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Like sharks, snakes, and spiders, pirahnas are widely feared. Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:49:38,379 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Problem: the paragraph has more than one controlling idea
2020-04-26 01:49:38,379 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> If a paragraph has more than one main idea, consider eliminating sentences that relate to the second idea, or split the paragraph into two or more paragraphs, each with only one main idea. Watch our short video on reverse outlining to learn a quick way to test whether your paragraphs are unified. In the following paragraph, the final two sentences branch off into a different topic; so, the revised paragraph eliminates them and concludes with a sentence that reminds the reader of the paragraph’s main idea.
2020-04-26 01:49:38,379 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,379 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Original paragraph
2020-04-26 01:49:38,379 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,379 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. A number of South American groups eat piranhas. They fry or grill the fish and then serve them with coconut milk or tucupi, a sauce made from fermented manioc juices.
2020-04-26 01:49:38,379 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Revised paragraph
2020-04-26 01:49:38,380 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,380 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 01:49:38,380 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Problem: transitions are needed within the paragraph
2020-04-26 01:49:38,380 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> You are probably familiar with the idea that transitions may be needed between paragraphs or sections in a paper (see our handout on transitions). Sometimes they are also helpful within the body of a single paragraph. Within a paragraph, transitions are often single words or short phrases that help to establish relationships between ideas and to create a logical progression of those ideas in a paragraph. This is especially likely to be true within paragraphs that discuss multiple examples. Let’s take a look at a version of our piranha paragraph that uses transitions to orient the reader:
2020-04-26 01:49:38,380 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,380 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, except in two main situations, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ instinct is to flee, not attack. But there are two situations in which a piranha bite is likely. The first is when a frightened piranha is lifted out of the water—for example, if it has been caught in a fishing net. The second is when the water level in pools where piranhas are living falls too low. A large number of fish may be trapped in a single pool, and if they are hungry, they may attack anything that enters the water.
2020-04-26 01:49:38,380 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> In this example, you can see how the phrases “the first” and “the second” help the reader follow the organization of the ideas in the paragraph.
2020-04-26 01:49:38,381 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,381 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Works consulted
2020-04-26 01:49:38,381 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> We consulted these works while writing this handout. This is not a comprehensive list of resources on the handout’s topic, and we encourage you to do your own research to find the latest publications on this topic. Please do not use this list as a model for the format of your own reference list, as it may not match the citation style you are using. For guidance on formatting citations, please see the UNC Libraries citation tutorial. We revise these tips periodically and welcome feedback.
2020-04-26 01:49:38,381 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,381 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Lunsford, Andrea. The St. Martin’s Handbook, Annotated Instructor’s Edition. 6th Ed. New York: St. Martin’s, 2008.
2020-04-26 01:49:38,381 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> 
2020-04-26 01:49:38,381 INFO com.counter.text.service.ParagraphLineProducerImpl [http-nio-8080-exec-7] #### -> Producing message -> Rosen, Leonard and Laurence Behrens. The Allyn and Bacon Handbook, Annotated Instructor’s Edition. 4th Ed. Boston: Allyn and Bacon, 2000.
2020-04-26 02:08:54,457 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication on 192-168-1-137.tpgi.com.au with PID 5801 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/classes started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 02:08:54,458 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 02:08:54,458 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: dev
2020-04-26 02:08:55,908 INFO com.counter.text.TextCounterSpringBootApplication [main] Started TextCounterSpringBootApplication in 1.681 seconds (JVM running for 2.004)
2020-04-26 02:08:55,913 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Paragraphs
2020-04-26 02:08:55,971 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> What this handout is about
2020-04-26 02:08:55,971 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> This handout will help you understand how paragraphs are formed, how to develop stronger paragraphs, and how to completely and clearly express your ideas.
2020-04-26 02:08:55,971 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,971 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> What is a paragraph?
2020-04-26 02:08:55,971 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Paragraphs are the building blocks of papers. Many students define paragraphs in terms of length: a paragraph is a group of at least five sentences, a paragraph is half a page long, etc. In reality, though, the unity and coherence of ideas among sentences is what constitutes a paragraph. A paragraph is defined as “a group of sentences or a single sentence that forms a unit” (Lunsford and Connors 116). Length and appearance do not determine whether a section in a paper is a paragraph. For instance, in some styles of writing, particularly journalistic styles, a paragraph can be just one sentence long. Ultimately, a paragraph is a sentence or group of sentences that support one main idea. In this handout, we will refer to this as the “controlling idea,” because it controls what happens in the rest of the paragraph.
2020-04-26 02:08:55,972 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,972 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> How do I decide what to put in a paragraph?
2020-04-26 02:08:55,972 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Before you can begin to determine what the composition of a particular paragraph will be, you must first decide on an argument and a working thesis statement for your paper. What is the most important idea that you are trying to convey to your reader? The information in each paragraph must be related to that idea. In other words, your paragraphs should remind your reader that there is a recurrent relationship between your thesis and the information in each paragraph. A working thesis functions like a seed from which your paper, and your ideas, will grow. The whole process is an organic one—a natural progression from a seed to a full-blown paper where there are direct, familial relationships between all of the ideas in the paper.
2020-04-26 02:08:55,972 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,972 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> The decision about what to put into your paragraphs begins with the germination of a seed of ideas; this “germination process” is better known as brainstorming. There are many techniques for brainstorming; whichever one you choose, this stage of paragraph development cannot be skipped. Building paragraphs can be like building a skyscraper: there must be a well-planned foundation that supports what you are building. Any cracks, inconsistencies, or other corruptions of the foundation can cause your whole paper to crumble.
2020-04-26 02:08:55,972 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,972 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> So, let’s suppose that you have done some brainstorming to develop your thesis. What else should you keep in mind as you begin to create paragraphs? Every paragraph in a paper should be:
2020-04-26 02:08:55,973 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,973 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Unified: All of the sentences in a single paragraph should be related to a single controlling idea (often expressed in the topic sentence of the paragraph).
2020-04-26 02:08:55,973 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Clearly related to the thesis: The sentences should all refer to the central idea, or thesis, of the paper (Rosen and Behrens 119).
2020-04-26 02:08:55,973 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Coherent: The sentences should be arranged in a logical manner and should follow a definite plan for development (Rosen and Behrens 119).
2020-04-26 02:08:55,973 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Well-developed: Every idea discussed in the paragraph should be adequately explained and supported through evidence and details that work together to explain the paragraph’s controlling idea (Rosen and Behrens 119).
2020-04-26 02:08:55,973 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> How do I organize a paragraph?
2020-04-26 02:08:55,973 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> There are many different ways to organize a paragraph. The organization you choose will depend on the controlling idea of the paragraph. Below are a few possibilities for organization, with links to brief examples:
2020-04-26 02:08:55,973 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,973 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Narration: Tell a story. Go chronologically, from start to finish. (See an example.)
2020-04-26 02:08:55,973 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Description: Provide specific details about what something looks, smells, tastes, sounds, or feels like. Organize spatially, in order of appearance, or by topic. (See an example.)
2020-04-26 02:08:55,974 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Process: Explain how something works, step by step. Perhaps follow a sequence—first, second, third. (See an example.)
2020-04-26 02:08:55,974 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Classification: Separate into groups or explain the various parts of a topic. (See an example.)
2020-04-26 02:08:55,974 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Illustration: Give examples and explain how those examples prove your point. (See the detailed example in the next section of this handout.)
2020-04-26 02:08:55,974 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 5-step process to paragraph development
2020-04-26 02:08:55,974 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Let’s walk through a 5-step process for building a paragraph. For each step there is an explanation and example. Our example paragraph will be about slave spirituals, the original songs that African Americans created during slavery. The model paragraph uses illustration (giving examples) to prove its point.
2020-04-26 02:08:55,974 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,974 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Step 1. Decide on a controlling idea and create a topic sentence
2020-04-26 02:08:55,974 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Paragraph development begins with the formulation of the controlling idea. This idea directs the paragraph’s development. Often, the controlling idea of a paragraph will appear in the form of a topic sentence. In some cases, you may need more than one sentence to express a paragraph’s controlling idea. Here is the controlling idea for our “model paragraph,” expressed in a topic sentence:
2020-04-26 02:08:55,974 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,975 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model controlling idea and topic sentence — Slave spirituals often had hidden double meanings.
2020-04-26 02:08:55,975 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Step 2. Explain the controlling idea
2020-04-26 02:08:55,975 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Paragraph development continues with an expression of the rationale or the explanation that the writer gives for how the reader should interpret the information presented in the idea statement or topic sentence of the paragraph. The writer explains his/her thinking about the main topic, idea, or focus of the paragraph. Here’s the sentence that would follow the controlling idea about slave spirituals:
2020-04-26 02:08:55,975 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,975 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model explanation — On one level, spirituals referenced heaven, Jesus, and the soul; but on another level, the songs spoke about slave resistance.
2020-04-26 02:08:55,975 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Step 3. Give an example (or multiple examples)
2020-04-26 02:08:55,975 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Paragraph development progresses with the expression of some type of support or evidence for the idea and the explanation that came before it. The example serves as a sign or representation of the relationship established in the idea and explanation portions of the paragraph. Here are two examples that we could use to illustrate the double meanings in slave spirituals:
2020-04-26 02:08:55,976 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,976 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model example A — For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.”
2020-04-26 02:08:55,976 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model example B — Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings.
2020-04-26 02:08:55,981 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Step 4. Explain the example(s)
2020-04-26 02:08:55,981 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> The next movement in paragraph development is an explanation of each example and its relevance to the topic sentence and rationale that were stated at the beginning of the paragraph. This explanation shows readers why you chose to use this/or these particular examples as evidence to support the major claim, or focus, in your paragraph.
2020-04-26 02:08:55,981 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,981 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Continue the pattern of giving examples and explaining them until all points/examples that the writer deems necessary have been made and explained. NONE of your examples should be left unexplained. You might be able to explain the relationship between the example and the topic sentence in the same sentence which introduced the example. More often, however, you will need to explain that relationship in a separate sentence. Look at these explanations for the two examples in the slave spirituals paragraph:
2020-04-26 02:08:55,981 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,981 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model explanation for example A — When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North.
2020-04-26 02:08:55,982 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model explanation for example B — [The relationship between example B and the main idea of the paragraph’s controlling idea is clear enough without adding another sentence to explain it.]
2020-04-26 02:08:55,982 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Step 5. Complete the paragraph’s idea or transition into the next paragraph
2020-04-26 02:08:55,982 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> The final movement in paragraph development involves tying up the loose ends of the paragraph and reminding the reader of the relevance of the information in this paragraph to the main or controlling idea of the paper. At this point, you can remind your reader about the relevance of the information that you just discussed in the paragraph. You might feel more comfortable, however, simply transitioning your reader to the next development in the next paragraph. Here’s an example of a sentence that completes the slave spirituals paragraph:
2020-04-26 02:08:55,983 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,983 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Model sentence for completing a paragraph — What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 02:08:55,983 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Notice that the example and explanation steps of this 5-step process (steps 3 and 4) can be repeated as needed. The idea is that you continue to use this pattern until you have completely developed the main idea of the paragraph.
2020-04-26 02:08:55,983 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,983 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Here is a look at the completed “model” paragraph:
2020-04-26 02:08:55,983 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Slave spirituals often had hidden double meanings. On one level, spirituals referenced heaven, Jesus, and the soul, but on another level, the songs spoke about slave resistance. For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.” When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North. Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings. What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 02:08:55,983 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Troubleshooting paragraphs
2020-04-26 02:08:55,983 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Problem: the paragraph has no topic sentence
2020-04-26 02:08:55,983 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Imagine each paragraph as a sandwich. The real content of the sandwich—the meat or other filling—is in the middle. It includes all the evidence you need to make the point. But it gets kind of messy to eat a sandwich without any bread. Your readers don’t know what to do with all the evidence you’ve given them. So, the top slice of bread (the first sentence of the paragraph) explains the topic (or controlling idea) of the paragraph. And, the bottom slice (the last sentence of the paragraph) tells the reader how the paragraph relates to the broader argument. In the original and revised paragraphs below, notice how a topic sentence expressing the controlling idea tells the reader the point of all the evidence.
2020-04-26 02:08:55,984 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,984 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Original paragraph
2020-04-26 02:08:55,984 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:08:55,984 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Revised paragraph
2020-04-26 02:08:55,984 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:08:55,985 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Once you have mastered the use of topic sentences, you may decide that the topic sentence for a particular paragraph really shouldn’t be the first sentence of the paragraph. This is fine—the topic sentence can actually go at the beginning, middle, or end of a paragraph; what’s important is that it is in there somewhere so that readers know what the main idea of the paragraph is and how it relates back to the thesis of your paper. Suppose that we wanted to start the piranha paragraph with a transition sentence—something that reminds the reader of what happened in the previous paragraph—rather than with the topic sentence. Let’s suppose that the previous paragraph was about all kinds of animals that people are afraid of, like sharks, snakes, and spiders. Our paragraph might look like this (the topic sentence is bold):
2020-04-26 02:08:55,985 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,985 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Like sharks, snakes, and spiders, pirahnas are widely feared. Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:08:55,985 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Problem: the paragraph has more than one controlling idea
2020-04-26 02:08:55,985 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> If a paragraph has more than one main idea, consider eliminating sentences that relate to the second idea, or split the paragraph into two or more paragraphs, each with only one main idea. Watch our short video on reverse outlining to learn a quick way to test whether your paragraphs are unified. In the following paragraph, the final two sentences branch off into a different topic; so, the revised paragraph eliminates them and concludes with a sentence that reminds the reader of the paragraph’s main idea.
2020-04-26 02:08:55,986 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,986 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Original paragraph
2020-04-26 02:08:55,986 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,986 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. A number of South American groups eat piranhas. They fry or grill the fish and then serve them with coconut milk or tucupi, a sauce made from fermented manioc juices.
2020-04-26 02:08:55,986 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Revised paragraph
2020-04-26 02:08:55,986 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,986 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:08:55,986 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Problem: transitions are needed within the paragraph
2020-04-26 02:08:55,986 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> You are probably familiar with the idea that transitions may be needed between paragraphs or sections in a paper (see our handout on transitions). Sometimes they are also helpful within the body of a single paragraph. Within a paragraph, transitions are often single words or short phrases that help to establish relationships between ideas and to create a logical progression of those ideas in a paragraph. This is especially likely to be true within paragraphs that discuss multiple examples. Let’s take a look at a version of our piranha paragraph that uses transitions to orient the reader:
2020-04-26 02:08:55,987 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,987 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Although most people consider piranhas to be quite dangerous, they are, except in two main situations, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ instinct is to flee, not attack. But there are two situations in which a piranha bite is likely. The first is when a frightened piranha is lifted out of the water—for example, if it has been caught in a fishing net. The second is when the water level in pools where piranhas are living falls too low. A large number of fish may be trapped in a single pool, and if they are hungry, they may attack anything that enters the water.
2020-04-26 02:08:55,987 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> In this example, you can see how the phrases “the first” and “the second” help the reader follow the organization of the ideas in the paragraph.
2020-04-26 02:08:55,987 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,987 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Works consulted
2020-04-26 02:08:55,987 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> We consulted these works while writing this handout. This is not a comprehensive list of resources on the handout’s topic, and we encourage you to do your own research to find the latest publications on this topic. Please do not use this list as a model for the format of your own reference list, as it may not match the citation style you are using. For guidance on formatting citations, please see the UNC Libraries citation tutorial. We revise these tips periodically and welcome feedback.
2020-04-26 02:08:55,987 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,988 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Lunsford, Andrea. The St. Martin’s Handbook, Annotated Instructor’s Edition. 6th Ed. New York: St. Martin’s, 2008.
2020-04-26 02:08:55,988 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> 
2020-04-26 02:08:55,988 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Rosen, Leonard and Laurence Behrens. The Allyn and Bacon Handbook, Annotated Instructor’s Edition. 4th Ed. Boston: Allyn and Bacon, 2000.
2020-04-26 02:08:56,746 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraphs
2020-04-26 02:08:56,748 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> What this handout is about
2020-04-26 02:08:56,748 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> This handout will help you understand how paragraphs are formed, how to develop stronger paragraphs, and how to completely and clearly express your ideas.
2020-04-26 02:08:56,749 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,749 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> What is a paragraph?
2020-04-26 02:08:56,749 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraphs are the building blocks of papers. Many students define paragraphs in terms of length: a paragraph is a group of at least five sentences, a paragraph is half a page long, etc. In reality, though, the unity and coherence of ideas among sentences is what constitutes a paragraph. A paragraph is defined as “a group of sentences or a single sentence that forms a unit” (Lunsford and Connors 116). Length and appearance do not determine whether a section in a paper is a paragraph. For instance, in some styles of writing, particularly journalistic styles, a paragraph can be just one sentence long. Ultimately, a paragraph is a sentence or group of sentences that support one main idea. In this handout, we will refer to this as the “controlling idea,” because it controls what happens in the rest of the paragraph.
2020-04-26 02:08:56,752 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,752 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> How do I decide what to put in a paragraph?
2020-04-26 02:08:56,752 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Before you can begin to determine what the composition of a particular paragraph will be, you must first decide on an argument and a working thesis statement for your paper. What is the most important idea that you are trying to convey to your reader? The information in each paragraph must be related to that idea. In other words, your paragraphs should remind your reader that there is a recurrent relationship between your thesis and the information in each paragraph. A working thesis functions like a seed from which your paper, and your ideas, will grow. The whole process is an organic one—a natural progression from a seed to a full-blown paper where there are direct, familial relationships between all of the ideas in the paper.
2020-04-26 02:08:56,753 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,753 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> The decision about what to put into your paragraphs begins with the germination of a seed of ideas; this “germination process” is better known as brainstorming. There are many techniques for brainstorming; whichever one you choose, this stage of paragraph development cannot be skipped. Building paragraphs can be like building a skyscraper: there must be a well-planned foundation that supports what you are building. Any cracks, inconsistencies, or other corruptions of the foundation can cause your whole paper to crumble.
2020-04-26 02:08:56,753 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,753 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> So, let’s suppose that you have done some brainstorming to develop your thesis. What else should you keep in mind as you begin to create paragraphs? Every paragraph in a paper should be:
2020-04-26 02:08:56,754 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,754 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Unified: All of the sentences in a single paragraph should be related to a single controlling idea (often expressed in the topic sentence of the paragraph).
2020-04-26 02:08:56,754 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Clearly related to the thesis: The sentences should all refer to the central idea, or thesis, of the paper (Rosen and Behrens 119).
2020-04-26 02:08:56,754 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Coherent: The sentences should be arranged in a logical manner and should follow a definite plan for development (Rosen and Behrens 119).
2020-04-26 02:08:56,755 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Well-developed: Every idea discussed in the paragraph should be adequately explained and supported through evidence and details that work together to explain the paragraph’s controlling idea (Rosen and Behrens 119).
2020-04-26 02:08:56,755 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> How do I organize a paragraph?
2020-04-26 02:08:56,755 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> There are many different ways to organize a paragraph. The organization you choose will depend on the controlling idea of the paragraph. Below are a few possibilities for organization, with links to brief examples:
2020-04-26 02:08:56,755 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,755 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Narration: Tell a story. Go chronologically, from start to finish. (See an example.)
2020-04-26 02:08:56,755 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Description: Provide specific details about what something looks, smells, tastes, sounds, or feels like. Organize spatially, in order of appearance, or by topic. (See an example.)
2020-04-26 02:08:56,756 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Process: Explain how something works, step by step. Perhaps follow a sequence—first, second, third. (See an example.)
2020-04-26 02:08:56,756 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Classification: Separate into groups or explain the various parts of a topic. (See an example.)
2020-04-26 02:08:56,756 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Illustration: Give examples and explain how those examples prove your point. (See the detailed example in the next section of this handout.)
2020-04-26 02:08:56,756 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 5-step process to paragraph development
2020-04-26 02:08:56,756 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Let’s walk through a 5-step process for building a paragraph. For each step there is an explanation and example. Our example paragraph will be about slave spirituals, the original songs that African Americans created during slavery. The model paragraph uses illustration (giving examples) to prove its point.
2020-04-26 02:08:56,756 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,757 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 1. Decide on a controlling idea and create a topic sentence
2020-04-26 02:08:56,757 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraph development begins with the formulation of the controlling idea. This idea directs the paragraph’s development. Often, the controlling idea of a paragraph will appear in the form of a topic sentence. In some cases, you may need more than one sentence to express a paragraph’s controlling idea. Here is the controlling idea for our “model paragraph,” expressed in a topic sentence:
2020-04-26 02:08:56,757 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,757 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model controlling idea and topic sentence — Slave spirituals often had hidden double meanings.
2020-04-26 02:08:56,757 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 2. Explain the controlling idea
2020-04-26 02:08:56,757 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraph development continues with an expression of the rationale or the explanation that the writer gives for how the reader should interpret the information presented in the idea statement or topic sentence of the paragraph. The writer explains his/her thinking about the main topic, idea, or focus of the paragraph. Here’s the sentence that would follow the controlling idea about slave spirituals:
2020-04-26 02:08:56,758 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,758 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model explanation — On one level, spirituals referenced heaven, Jesus, and the soul; but on another level, the songs spoke about slave resistance.
2020-04-26 02:08:56,758 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 3. Give an example (or multiple examples)
2020-04-26 02:08:56,758 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraph development progresses with the expression of some type of support or evidence for the idea and the explanation that came before it. The example serves as a sign or representation of the relationship established in the idea and explanation portions of the paragraph. Here are two examples that we could use to illustrate the double meanings in slave spirituals:
2020-04-26 02:08:56,758 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,758 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model example A — For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.”
2020-04-26 02:08:56,759 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model example B — Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings.
2020-04-26 02:08:56,759 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 4. Explain the example(s)
2020-04-26 02:08:56,759 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> The next movement in paragraph development is an explanation of each example and its relevance to the topic sentence and rationale that were stated at the beginning of the paragraph. This explanation shows readers why you chose to use this/or these particular examples as evidence to support the major claim, or focus, in your paragraph.
2020-04-26 02:08:56,759 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,759 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Continue the pattern of giving examples and explaining them until all points/examples that the writer deems necessary have been made and explained. NONE of your examples should be left unexplained. You might be able to explain the relationship between the example and the topic sentence in the same sentence which introduced the example. More often, however, you will need to explain that relationship in a separate sentence. Look at these explanations for the two examples in the slave spirituals paragraph:
2020-04-26 02:08:56,759 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,760 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model explanation for example A — When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North.
2020-04-26 02:08:56,760 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model explanation for example B — [The relationship between example B and the main idea of the paragraph’s controlling idea is clear enough without adding another sentence to explain it.]
2020-04-26 02:08:56,760 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 5. Complete the paragraph’s idea or transition into the next paragraph
2020-04-26 02:08:56,760 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> The final movement in paragraph development involves tying up the loose ends of the paragraph and reminding the reader of the relevance of the information in this paragraph to the main or controlling idea of the paper. At this point, you can remind your reader about the relevance of the information that you just discussed in the paragraph. You might feel more comfortable, however, simply transitioning your reader to the next development in the next paragraph. Here’s an example of a sentence that completes the slave spirituals paragraph:
2020-04-26 02:08:56,760 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,760 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model sentence for completing a paragraph — What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 02:08:56,760 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Notice that the example and explanation steps of this 5-step process (steps 3 and 4) can be repeated as needed. The idea is that you continue to use this pattern until you have completely developed the main idea of the paragraph.
2020-04-26 02:08:56,761 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,761 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Here is a look at the completed “model” paragraph:
2020-04-26 02:08:56,761 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Slave spirituals often had hidden double meanings. On one level, spirituals referenced heaven, Jesus, and the soul, but on another level, the songs spoke about slave resistance. For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.” When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North. Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings. What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 02:08:56,761 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Troubleshooting paragraphs
2020-04-26 02:08:56,761 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Problem: the paragraph has no topic sentence
2020-04-26 02:08:56,761 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Imagine each paragraph as a sandwich. The real content of the sandwich—the meat or other filling—is in the middle. It includes all the evidence you need to make the point. But it gets kind of messy to eat a sandwich without any bread. Your readers don’t know what to do with all the evidence you’ve given them. So, the top slice of bread (the first sentence of the paragraph) explains the topic (or controlling idea) of the paragraph. And, the bottom slice (the last sentence of the paragraph) tells the reader how the paragraph relates to the broader argument. In the original and revised paragraphs below, notice how a topic sentence expressing the controlling idea tells the reader the point of all the evidence.
2020-04-26 02:08:56,762 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,762 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Original paragraph
2020-04-26 02:08:56,762 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:08:56,762 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Revised paragraph
2020-04-26 02:08:56,762 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:08:56,762 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Once you have mastered the use of topic sentences, you may decide that the topic sentence for a particular paragraph really shouldn’t be the first sentence of the paragraph. This is fine—the topic sentence can actually go at the beginning, middle, or end of a paragraph; what’s important is that it is in there somewhere so that readers know what the main idea of the paragraph is and how it relates back to the thesis of your paper. Suppose that we wanted to start the piranha paragraph with a transition sentence—something that reminds the reader of what happened in the previous paragraph—rather than with the topic sentence. Let’s suppose that the previous paragraph was about all kinds of animals that people are afraid of, like sharks, snakes, and spiders. Our paragraph might look like this (the topic sentence is bold):
2020-04-26 02:08:56,763 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,763 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Like sharks, snakes, and spiders, pirahnas are widely feared. Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:08:56,763 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Problem: the paragraph has more than one controlling idea
2020-04-26 02:08:56,763 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> If a paragraph has more than one main idea, consider eliminating sentences that relate to the second idea, or split the paragraph into two or more paragraphs, each with only one main idea. Watch our short video on reverse outlining to learn a quick way to test whether your paragraphs are unified. In the following paragraph, the final two sentences branch off into a different topic; so, the revised paragraph eliminates them and concludes with a sentence that reminds the reader of the paragraph’s main idea.
2020-04-26 02:08:56,763 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,763 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Original paragraph
2020-04-26 02:08:56,764 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,764 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. A number of South American groups eat piranhas. They fry or grill the fish and then serve them with coconut milk or tucupi, a sauce made from fermented manioc juices.
2020-04-26 02:08:56,764 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Revised paragraph
2020-04-26 02:08:56,764 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,764 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:08:56,764 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Problem: transitions are needed within the paragraph
2020-04-26 02:08:56,764 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> You are probably familiar with the idea that transitions may be needed between paragraphs or sections in a paper (see our handout on transitions). Sometimes they are also helpful within the body of a single paragraph. Within a paragraph, transitions are often single words or short phrases that help to establish relationships between ideas and to create a logical progression of those ideas in a paragraph. This is especially likely to be true within paragraphs that discuss multiple examples. Let’s take a look at a version of our piranha paragraph that uses transitions to orient the reader:
2020-04-26 02:08:56,765 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,765 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, except in two main situations, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ instinct is to flee, not attack. But there are two situations in which a piranha bite is likely. The first is when a frightened piranha is lifted out of the water—for example, if it has been caught in a fishing net. The second is when the water level in pools where piranhas are living falls too low. A large number of fish may be trapped in a single pool, and if they are hungry, they may attack anything that enters the water.
2020-04-26 02:08:56,765 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> In this example, you can see how the phrases “the first” and “the second” help the reader follow the organization of the ideas in the paragraph.
2020-04-26 02:08:56,765 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,765 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Works consulted
2020-04-26 02:08:56,765 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> We consulted these works while writing this handout. This is not a comprehensive list of resources on the handout’s topic, and we encourage you to do your own research to find the latest publications on this topic. Please do not use this list as a model for the format of your own reference list, as it may not match the citation style you are using. For guidance on formatting citations, please see the UNC Libraries citation tutorial. We revise these tips periodically and welcome feedback.
2020-04-26 02:08:56,766 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,766 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Lunsford, Andrea. The St. Martin’s Handbook, Annotated Instructor’s Edition. 6th Ed. New York: St. Martin’s, 2008.
2020-04-26 02:08:56,766 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:08:56,766 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Rosen, Leonard and Laurence Behrens. The Allyn and Bacon Handbook, Annotated Instructor’s Edition. 4th Ed. Boston: Allyn and Bacon, 2000.
2020-04-26 02:11:47,803 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraphs
2020-04-26 02:11:47,804 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> What this handout is about
2020-04-26 02:11:47,804 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> This handout will help you understand how paragraphs are formed, how to develop stronger paragraphs, and how to completely and clearly express your ideas.
2020-04-26 02:11:47,804 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,804 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> What is a paragraph?
2020-04-26 02:11:47,805 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraphs are the building blocks of papers. Many students define paragraphs in terms of length: a paragraph is a group of at least five sentences, a paragraph is half a page long, etc. In reality, though, the unity and coherence of ideas among sentences is what constitutes a paragraph. A paragraph is defined as “a group of sentences or a single sentence that forms a unit” (Lunsford and Connors 116). Length and appearance do not determine whether a section in a paper is a paragraph. For instance, in some styles of writing, particularly journalistic styles, a paragraph can be just one sentence long. Ultimately, a paragraph is a sentence or group of sentences that support one main idea. In this handout, we will refer to this as the “controlling idea,” because it controls what happens in the rest of the paragraph.
2020-04-26 02:11:47,805 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,806 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> How do I decide what to put in a paragraph?
2020-04-26 02:11:47,806 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Before you can begin to determine what the composition of a particular paragraph will be, you must first decide on an argument and a working thesis statement for your paper. What is the most important idea that you are trying to convey to your reader? The information in each paragraph must be related to that idea. In other words, your paragraphs should remind your reader that there is a recurrent relationship between your thesis and the information in each paragraph. A working thesis functions like a seed from which your paper, and your ideas, will grow. The whole process is an organic one—a natural progression from a seed to a full-blown paper where there are direct, familial relationships between all of the ideas in the paper.
2020-04-26 02:11:47,806 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,806 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> The decision about what to put into your paragraphs begins with the germination of a seed of ideas; this “germination process” is better known as brainstorming. There are many techniques for brainstorming; whichever one you choose, this stage of paragraph development cannot be skipped. Building paragraphs can be like building a skyscraper: there must be a well-planned foundation that supports what you are building. Any cracks, inconsistencies, or other corruptions of the foundation can cause your whole paper to crumble.
2020-04-26 02:11:47,807 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,807 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> So, let’s suppose that you have done some brainstorming to develop your thesis. What else should you keep in mind as you begin to create paragraphs? Every paragraph in a paper should be:
2020-04-26 02:11:47,807 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,807 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Unified: All of the sentences in a single paragraph should be related to a single controlling idea (often expressed in the topic sentence of the paragraph).
2020-04-26 02:11:47,808 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Clearly related to the thesis: The sentences should all refer to the central idea, or thesis, of the paper (Rosen and Behrens 119).
2020-04-26 02:11:47,808 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Coherent: The sentences should be arranged in a logical manner and should follow a definite plan for development (Rosen and Behrens 119).
2020-04-26 02:11:47,808 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Well-developed: Every idea discussed in the paragraph should be adequately explained and supported through evidence and details that work together to explain the paragraph’s controlling idea (Rosen and Behrens 119).
2020-04-26 02:11:47,808 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> How do I organize a paragraph?
2020-04-26 02:11:47,809 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> There are many different ways to organize a paragraph. The organization you choose will depend on the controlling idea of the paragraph. Below are a few possibilities for organization, with links to brief examples:
2020-04-26 02:11:47,809 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,809 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Narration: Tell a story. Go chronologically, from start to finish. (See an example.)
2020-04-26 02:11:47,809 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Description: Provide specific details about what something looks, smells, tastes, sounds, or feels like. Organize spatially, in order of appearance, or by topic. (See an example.)
2020-04-26 02:11:47,809 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Process: Explain how something works, step by step. Perhaps follow a sequence—first, second, third. (See an example.)
2020-04-26 02:11:47,809 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Classification: Separate into groups or explain the various parts of a topic. (See an example.)
2020-04-26 02:11:47,810 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Illustration: Give examples and explain how those examples prove your point. (See the detailed example in the next section of this handout.)
2020-04-26 02:11:47,810 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 5-step process to paragraph development
2020-04-26 02:11:47,816 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Let’s walk through a 5-step process for building a paragraph. For each step there is an explanation and example. Our example paragraph will be about slave spirituals, the original songs that African Americans created during slavery. The model paragraph uses illustration (giving examples) to prove its point.
2020-04-26 02:11:47,816 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,816 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 1. Decide on a controlling idea and create a topic sentence
2020-04-26 02:11:47,816 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraph development begins with the formulation of the controlling idea. This idea directs the paragraph’s development. Often, the controlling idea of a paragraph will appear in the form of a topic sentence. In some cases, you may need more than one sentence to express a paragraph’s controlling idea. Here is the controlling idea for our “model paragraph,” expressed in a topic sentence:
2020-04-26 02:11:47,816 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,816 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model controlling idea and topic sentence — Slave spirituals often had hidden double meanings.
2020-04-26 02:11:47,816 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 2. Explain the controlling idea
2020-04-26 02:11:47,817 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraph development continues with an expression of the rationale or the explanation that the writer gives for how the reader should interpret the information presented in the idea statement or topic sentence of the paragraph. The writer explains his/her thinking about the main topic, idea, or focus of the paragraph. Here’s the sentence that would follow the controlling idea about slave spirituals:
2020-04-26 02:11:47,817 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,817 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model explanation — On one level, spirituals referenced heaven, Jesus, and the soul; but on another level, the songs spoke about slave resistance.
2020-04-26 02:11:47,817 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 3. Give an example (or multiple examples)
2020-04-26 02:11:47,817 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraph development progresses with the expression of some type of support or evidence for the idea and the explanation that came before it. The example serves as a sign or representation of the relationship established in the idea and explanation portions of the paragraph. Here are two examples that we could use to illustrate the double meanings in slave spirituals:
2020-04-26 02:11:47,817 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,817 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model example A — For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.”
2020-04-26 02:11:47,817 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model example B — Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings.
2020-04-26 02:11:47,818 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 4. Explain the example(s)
2020-04-26 02:11:47,818 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> The next movement in paragraph development is an explanation of each example and its relevance to the topic sentence and rationale that were stated at the beginning of the paragraph. This explanation shows readers why you chose to use this/or these particular examples as evidence to support the major claim, or focus, in your paragraph.
2020-04-26 02:11:47,818 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,818 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Continue the pattern of giving examples and explaining them until all points/examples that the writer deems necessary have been made and explained. NONE of your examples should be left unexplained. You might be able to explain the relationship between the example and the topic sentence in the same sentence which introduced the example. More often, however, you will need to explain that relationship in a separate sentence. Look at these explanations for the two examples in the slave spirituals paragraph:
2020-04-26 02:11:47,818 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,818 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model explanation for example A — When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North.
2020-04-26 02:11:47,818 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model explanation for example B — [The relationship between example B and the main idea of the paragraph’s controlling idea is clear enough without adding another sentence to explain it.]
2020-04-26 02:11:47,819 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 5. Complete the paragraph’s idea or transition into the next paragraph
2020-04-26 02:11:47,819 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> The final movement in paragraph development involves tying up the loose ends of the paragraph and reminding the reader of the relevance of the information in this paragraph to the main or controlling idea of the paper. At this point, you can remind your reader about the relevance of the information that you just discussed in the paragraph. You might feel more comfortable, however, simply transitioning your reader to the next development in the next paragraph. Here’s an example of a sentence that completes the slave spirituals paragraph:
2020-04-26 02:11:47,819 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,819 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model sentence for completing a paragraph — What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 02:11:47,819 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Notice that the example and explanation steps of this 5-step process (steps 3 and 4) can be repeated as needed. The idea is that you continue to use this pattern until you have completely developed the main idea of the paragraph.
2020-04-26 02:11:47,819 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,819 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Here is a look at the completed “model” paragraph:
2020-04-26 02:11:47,819 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Slave spirituals often had hidden double meanings. On one level, spirituals referenced heaven, Jesus, and the soul, but on another level, the songs spoke about slave resistance. For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.” When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North. Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings. What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 02:11:47,820 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Troubleshooting paragraphs
2020-04-26 02:11:47,820 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Problem: the paragraph has no topic sentence
2020-04-26 02:11:47,820 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Imagine each paragraph as a sandwich. The real content of the sandwich—the meat or other filling—is in the middle. It includes all the evidence you need to make the point. But it gets kind of messy to eat a sandwich without any bread. Your readers don’t know what to do with all the evidence you’ve given them. So, the top slice of bread (the first sentence of the paragraph) explains the topic (or controlling idea) of the paragraph. And, the bottom slice (the last sentence of the paragraph) tells the reader how the paragraph relates to the broader argument. In the original and revised paragraphs below, notice how a topic sentence expressing the controlling idea tells the reader the point of all the evidence.
2020-04-26 02:11:47,820 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,820 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Original paragraph
2020-04-26 02:11:47,820 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:11:47,841 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Revised paragraph
2020-04-26 02:11:47,841 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:11:47,841 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Once you have mastered the use of topic sentences, you may decide that the topic sentence for a particular paragraph really shouldn’t be the first sentence of the paragraph. This is fine—the topic sentence can actually go at the beginning, middle, or end of a paragraph; what’s important is that it is in there somewhere so that readers know what the main idea of the paragraph is and how it relates back to the thesis of your paper. Suppose that we wanted to start the piranha paragraph with a transition sentence—something that reminds the reader of what happened in the previous paragraph—rather than with the topic sentence. Let’s suppose that the previous paragraph was about all kinds of animals that people are afraid of, like sharks, snakes, and spiders. Our paragraph might look like this (the topic sentence is bold):
2020-04-26 02:11:47,841 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,841 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Like sharks, snakes, and spiders, pirahnas are widely feared. Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:11:47,841 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Problem: the paragraph has more than one controlling idea
2020-04-26 02:11:47,842 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> If a paragraph has more than one main idea, consider eliminating sentences that relate to the second idea, or split the paragraph into two or more paragraphs, each with only one main idea. Watch our short video on reverse outlining to learn a quick way to test whether your paragraphs are unified. In the following paragraph, the final two sentences branch off into a different topic; so, the revised paragraph eliminates them and concludes with a sentence that reminds the reader of the paragraph’s main idea.
2020-04-26 02:11:47,842 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,842 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Original paragraph
2020-04-26 02:11:47,842 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,842 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. A number of South American groups eat piranhas. They fry or grill the fish and then serve them with coconut milk or tucupi, a sauce made from fermented manioc juices.
2020-04-26 02:11:47,842 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Revised paragraph
2020-04-26 02:11:47,842 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,842 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:11:47,842 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Problem: transitions are needed within the paragraph
2020-04-26 02:11:47,842 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> You are probably familiar with the idea that transitions may be needed between paragraphs or sections in a paper (see our handout on transitions). Sometimes they are also helpful within the body of a single paragraph. Within a paragraph, transitions are often single words or short phrases that help to establish relationships between ideas and to create a logical progression of those ideas in a paragraph. This is especially likely to be true within paragraphs that discuss multiple examples. Let’s take a look at a version of our piranha paragraph that uses transitions to orient the reader:
2020-04-26 02:11:47,843 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,843 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, except in two main situations, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ instinct is to flee, not attack. But there are two situations in which a piranha bite is likely. The first is when a frightened piranha is lifted out of the water—for example, if it has been caught in a fishing net. The second is when the water level in pools where piranhas are living falls too low. A large number of fish may be trapped in a single pool, and if they are hungry, they may attack anything that enters the water.
2020-04-26 02:11:47,843 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> In this example, you can see how the phrases “the first” and “the second” help the reader follow the organization of the ideas in the paragraph.
2020-04-26 02:11:47,843 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,843 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Works consulted
2020-04-26 02:11:47,843 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> We consulted these works while writing this handout. This is not a comprehensive list of resources on the handout’s topic, and we encourage you to do your own research to find the latest publications on this topic. Please do not use this list as a model for the format of your own reference list, as it may not match the citation style you are using. For guidance on formatting citations, please see the UNC Libraries citation tutorial. We revise these tips periodically and welcome feedback.
2020-04-26 02:11:47,843 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,843 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Lunsford, Andrea. The St. Martin’s Handbook, Annotated Instructor’s Edition. 6th Ed. New York: St. Martin’s, 2008.
2020-04-26 02:11:47,843 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:11:47,844 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Rosen, Leonard and Laurence Behrens. The Allyn and Bacon Handbook, Annotated Instructor’s Edition. 4th Ed. Boston: Allyn and Bacon, 2000.
2020-04-26 02:13:38,668 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraphs
2020-04-26 02:13:38,678 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> What this handout is about
2020-04-26 02:13:38,679 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> This handout will help you understand how paragraphs are formed, how to develop stronger paragraphs, and how to completely and clearly express your ideas.
2020-04-26 02:13:38,679 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,679 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> What is a paragraph?
2020-04-26 02:13:38,679 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraphs are the building blocks of papers. Many students define paragraphs in terms of length: a paragraph is a group of at least five sentences, a paragraph is half a page long, etc. In reality, though, the unity and coherence of ideas among sentences is what constitutes a paragraph. A paragraph is defined as “a group of sentences or a single sentence that forms a unit” (Lunsford and Connors 116). Length and appearance do not determine whether a section in a paper is a paragraph. For instance, in some styles of writing, particularly journalistic styles, a paragraph can be just one sentence long. Ultimately, a paragraph is a sentence or group of sentences that support one main idea. In this handout, we will refer to this as the “controlling idea,” because it controls what happens in the rest of the paragraph.
2020-04-26 02:13:38,679 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,679 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> How do I decide what to put in a paragraph?
2020-04-26 02:13:38,690 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Before you can begin to determine what the composition of a particular paragraph will be, you must first decide on an argument and a working thesis statement for your paper. What is the most important idea that you are trying to convey to your reader? The information in each paragraph must be related to that idea. In other words, your paragraphs should remind your reader that there is a recurrent relationship between your thesis and the information in each paragraph. A working thesis functions like a seed from which your paper, and your ideas, will grow. The whole process is an organic one—a natural progression from a seed to a full-blown paper where there are direct, familial relationships between all of the ideas in the paper.
2020-04-26 02:13:38,691 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,691 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> The decision about what to put into your paragraphs begins with the germination of a seed of ideas; this “germination process” is better known as brainstorming. There are many techniques for brainstorming; whichever one you choose, this stage of paragraph development cannot be skipped. Building paragraphs can be like building a skyscraper: there must be a well-planned foundation that supports what you are building. Any cracks, inconsistencies, or other corruptions of the foundation can cause your whole paper to crumble.
2020-04-26 02:13:38,691 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,691 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> So, let’s suppose that you have done some brainstorming to develop your thesis. What else should you keep in mind as you begin to create paragraphs? Every paragraph in a paper should be:
2020-04-26 02:13:38,691 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,691 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Unified: All of the sentences in a single paragraph should be related to a single controlling idea (often expressed in the topic sentence of the paragraph).
2020-04-26 02:13:38,691 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Clearly related to the thesis: The sentences should all refer to the central idea, or thesis, of the paper (Rosen and Behrens 119).
2020-04-26 02:13:38,692 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Coherent: The sentences should be arranged in a logical manner and should follow a definite plan for development (Rosen and Behrens 119).
2020-04-26 02:13:38,692 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Well-developed: Every idea discussed in the paragraph should be adequately explained and supported through evidence and details that work together to explain the paragraph’s controlling idea (Rosen and Behrens 119).
2020-04-26 02:13:38,692 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> How do I organize a paragraph?
2020-04-26 02:13:38,692 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> There are many different ways to organize a paragraph. The organization you choose will depend on the controlling idea of the paragraph. Below are a few possibilities for organization, with links to brief examples:
2020-04-26 02:13:38,692 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,692 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Narration: Tell a story. Go chronologically, from start to finish. (See an example.)
2020-04-26 02:13:38,693 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Description: Provide specific details about what something looks, smells, tastes, sounds, or feels like. Organize spatially, in order of appearance, or by topic. (See an example.)
2020-04-26 02:13:38,693 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Process: Explain how something works, step by step. Perhaps follow a sequence—first, second, third. (See an example.)
2020-04-26 02:13:38,693 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Classification: Separate into groups or explain the various parts of a topic. (See an example.)
2020-04-26 02:13:38,693 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Illustration: Give examples and explain how those examples prove your point. (See the detailed example in the next section of this handout.)
2020-04-26 02:13:38,693 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 5-step process to paragraph development
2020-04-26 02:13:38,693 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Let’s walk through a 5-step process for building a paragraph. For each step there is an explanation and example. Our example paragraph will be about slave spirituals, the original songs that African Americans created during slavery. The model paragraph uses illustration (giving examples) to prove its point.
2020-04-26 02:13:38,693 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,694 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 1. Decide on a controlling idea and create a topic sentence
2020-04-26 02:13:38,694 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraph development begins with the formulation of the controlling idea. This idea directs the paragraph’s development. Often, the controlling idea of a paragraph will appear in the form of a topic sentence. In some cases, you may need more than one sentence to express a paragraph’s controlling idea. Here is the controlling idea for our “model paragraph,” expressed in a topic sentence:
2020-04-26 02:13:38,694 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,694 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model controlling idea and topic sentence — Slave spirituals often had hidden double meanings.
2020-04-26 02:13:38,694 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 2. Explain the controlling idea
2020-04-26 02:13:38,694 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraph development continues with an expression of the rationale or the explanation that the writer gives for how the reader should interpret the information presented in the idea statement or topic sentence of the paragraph. The writer explains his/her thinking about the main topic, idea, or focus of the paragraph. Here’s the sentence that would follow the controlling idea about slave spirituals:
2020-04-26 02:13:38,694 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,694 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model explanation — On one level, spirituals referenced heaven, Jesus, and the soul; but on another level, the songs spoke about slave resistance.
2020-04-26 02:13:38,694 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 3. Give an example (or multiple examples)
2020-04-26 02:13:38,694 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Paragraph development progresses with the expression of some type of support or evidence for the idea and the explanation that came before it. The example serves as a sign or representation of the relationship established in the idea and explanation portions of the paragraph. Here are two examples that we could use to illustrate the double meanings in slave spirituals:
2020-04-26 02:13:38,695 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,695 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model example A — For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.”
2020-04-26 02:13:38,695 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model example B — Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings.
2020-04-26 02:13:38,695 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 4. Explain the example(s)
2020-04-26 02:13:38,695 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> The next movement in paragraph development is an explanation of each example and its relevance to the topic sentence and rationale that were stated at the beginning of the paragraph. This explanation shows readers why you chose to use this/or these particular examples as evidence to support the major claim, or focus, in your paragraph.
2020-04-26 02:13:38,695 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,695 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Continue the pattern of giving examples and explaining them until all points/examples that the writer deems necessary have been made and explained. NONE of your examples should be left unexplained. You might be able to explain the relationship between the example and the topic sentence in the same sentence which introduced the example. More often, however, you will need to explain that relationship in a separate sentence. Look at these explanations for the two examples in the slave spirituals paragraph:
2020-04-26 02:13:38,695 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,695 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model explanation for example A — When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North.
2020-04-26 02:13:38,695 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model explanation for example B — [The relationship between example B and the main idea of the paragraph’s controlling idea is clear enough without adding another sentence to explain it.]
2020-04-26 02:13:38,695 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Step 5. Complete the paragraph’s idea or transition into the next paragraph
2020-04-26 02:13:38,696 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> The final movement in paragraph development involves tying up the loose ends of the paragraph and reminding the reader of the relevance of the information in this paragraph to the main or controlling idea of the paper. At this point, you can remind your reader about the relevance of the information that you just discussed in the paragraph. You might feel more comfortable, however, simply transitioning your reader to the next development in the next paragraph. Here’s an example of a sentence that completes the slave spirituals paragraph:
2020-04-26 02:13:38,696 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,696 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Model sentence for completing a paragraph — What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 02:13:38,696 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Notice that the example and explanation steps of this 5-step process (steps 3 and 4) can be repeated as needed. The idea is that you continue to use this pattern until you have completely developed the main idea of the paragraph.
2020-04-26 02:13:38,696 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,696 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Here is a look at the completed “model” paragraph:
2020-04-26 02:13:38,696 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Slave spirituals often had hidden double meanings. On one level, spirituals referenced heaven, Jesus, and the soul, but on another level, the songs spoke about slave resistance. For example, according to Frederick Douglass, the song “O Canaan, Sweet Canaan” spoke of slaves’ longing for heaven, but it also expressed their desire to escape to the North. Careful listeners heard this second meaning in the following lyrics: “I don’t expect to stay / Much longer here. / Run to Jesus, shun the danger. / I don’t expect to stay.” When slaves sang this song, they could have been speaking of their departure from this life and their arrival in heaven; however, they also could have been describing their plans to leave the South and run, not to Jesus, but to the North. Slaves even used songs like “Steal Away to Jesus (at midnight)” to announce to other slaves the time and place of secret, forbidden meetings. What whites heard as merely spiritual songs, slaves discerned as detailed messages. The hidden meanings in spirituals allowed slaves to sing what they could not say.
2020-04-26 02:13:38,696 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Troubleshooting paragraphs
2020-04-26 02:13:38,697 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Problem: the paragraph has no topic sentence
2020-04-26 02:13:38,697 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Imagine each paragraph as a sandwich. The real content of the sandwich—the meat or other filling—is in the middle. It includes all the evidence you need to make the point. But it gets kind of messy to eat a sandwich without any bread. Your readers don’t know what to do with all the evidence you’ve given them. So, the top slice of bread (the first sentence of the paragraph) explains the topic (or controlling idea) of the paragraph. And, the bottom slice (the last sentence of the paragraph) tells the reader how the paragraph relates to the broader argument. In the original and revised paragraphs below, notice how a topic sentence expressing the controlling idea tells the reader the point of all the evidence.
2020-04-26 02:13:38,697 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,697 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Original paragraph
2020-04-26 02:13:38,697 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:13:38,697 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Revised paragraph
2020-04-26 02:13:38,697 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:13:38,697 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Once you have mastered the use of topic sentences, you may decide that the topic sentence for a particular paragraph really shouldn’t be the first sentence of the paragraph. This is fine—the topic sentence can actually go at the beginning, middle, or end of a paragraph; what’s important is that it is in there somewhere so that readers know what the main idea of the paragraph is and how it relates back to the thesis of your paper. Suppose that we wanted to start the piranha paragraph with a transition sentence—something that reminds the reader of what happened in the previous paragraph—rather than with the topic sentence. Let’s suppose that the previous paragraph was about all kinds of animals that people are afraid of, like sharks, snakes, and spiders. Our paragraph might look like this (the topic sentence is bold):
2020-04-26 02:13:38,698 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,698 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Like sharks, snakes, and spiders, pirahnas are widely feared. Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:13:38,698 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Problem: the paragraph has more than one controlling idea
2020-04-26 02:13:38,698 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> If a paragraph has more than one main idea, consider eliminating sentences that relate to the second idea, or split the paragraph into two or more paragraphs, each with only one main idea. Watch our short video on reverse outlining to learn a quick way to test whether your paragraphs are unified. In the following paragraph, the final two sentences branch off into a different topic; so, the revised paragraph eliminates them and concludes with a sentence that reminds the reader of the paragraph’s main idea.
2020-04-26 02:13:38,698 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,698 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Original paragraph
2020-04-26 02:13:38,698 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,698 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. A number of South American groups eat piranhas. They fry or grill the fish and then serve them with coconut milk or tucupi, a sauce made from fermented manioc juices.
2020-04-26 02:13:38,698 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Revised paragraph
2020-04-26 02:13:38,698 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,703 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, for the most part, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ first instinct is to flee, not attack. Their fear of humans makes sense. Far more piranhas are eaten by people than people are eaten by piranhas. If the fish are well-fed, they won’t bite humans.
2020-04-26 02:13:38,704 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Problem: transitions are needed within the paragraph
2020-04-26 02:13:38,704 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> You are probably familiar with the idea that transitions may be needed between paragraphs or sections in a paper (see our handout on transitions). Sometimes they are also helpful within the body of a single paragraph. Within a paragraph, transitions are often single words or short phrases that help to establish relationships between ideas and to create a logical progression of those ideas in a paragraph. This is especially likely to be true within paragraphs that discuss multiple examples. Let’s take a look at a version of our piranha paragraph that uses transitions to orient the reader:
2020-04-26 02:13:38,704 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,704 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Although most people consider piranhas to be quite dangerous, they are, except in two main situations, entirely harmless. Piranhas rarely feed on large animals; they eat smaller fish and aquatic plants. When confronted with humans, piranhas’ instinct is to flee, not attack. But there are two situations in which a piranha bite is likely. The first is when a frightened piranha is lifted out of the water—for example, if it has been caught in a fishing net. The second is when the water level in pools where piranhas are living falls too low. A large number of fish may be trapped in a single pool, and if they are hungry, they may attack anything that enters the water.
2020-04-26 02:13:38,704 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> In this example, you can see how the phrases “the first” and “the second” help the reader follow the organization of the ideas in the paragraph.
2020-04-26 02:13:38,704 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,704 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Works consulted
2020-04-26 02:13:38,704 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> We consulted these works while writing this handout. This is not a comprehensive list of resources on the handout’s topic, and we encourage you to do your own research to find the latest publications on this topic. Please do not use this list as a model for the format of your own reference list, as it may not match the citation style you are using. For guidance on formatting citations, please see the UNC Libraries citation tutorial. We revise these tips periodically and welcome feedback.
2020-04-26 02:13:38,705 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,705 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Lunsford, Andrea. The St. Martin’s Handbook, Annotated Instructor’s Edition. 6th Ed. New York: St. Martin’s, 2008.
2020-04-26 02:13:38,705 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> 
2020-04-26 02:13:38,705 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Rosen, Leonard and Laurence Behrens. The Allyn and Bacon Handbook, Annotated Instructor’s Edition. 4th Ed. Boston: Allyn and Bacon, 2000.
2020-04-26 02:26:01,243 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication v0.0.1-SNAPSHOT on 192-168-1-137.tpgi.com.au with PID 6200 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/text-search-counter-api-0.0.1-SNAPSHOT.jar started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 02:26:01,245 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 02:26:01,245 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: local
2020-04-26 02:26:03,082 ERROR org.springframework.kafka.listener.ConcurrentMessageListenerContainer [main] Failed to check topic existence
org.apache.kafka.common.KafkaException: Failed to create new KafkaAdminClient
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:407)
	at org.apache.kafka.clients.admin.AdminClient.create(AdminClient.java:65)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.checkTopics(AbstractMessageListenerContainer.java:353)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:144)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:367)
	... 29 common frames omitted
2020-04-26 02:26:03,187 ERROR org.springframework.boot.SpringApplication [main] Application run failed
org.springframework.context.ApplicationContextException: Failed to start bean 'org.springframework.kafka.config.internalKafkaListenerEndpointRegistry'; nested exception is org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:185)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:827)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:629)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:207)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumerWithAdjustedProperties(DefaultKafkaConsumerFactory.java:193)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:167)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumer(DefaultKafkaConsumerFactory.java:141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.<init>(KafkaMessageListenerContainer.java:616)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer.doStart(KafkaMessageListenerContainer.java:331)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:184)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	... 22 common frames omitted
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:735)
	... 35 common frames omitted
2020-04-26 02:26:52,911 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication v0.0.1-SNAPSHOT on 192-168-1-137.tpgi.com.au with PID 6214 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/text-search-counter-api-0.0.1-SNAPSHOT.jar started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 02:26:52,912 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 02:26:52,912 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: local
2020-04-26 02:26:54,719 ERROR org.springframework.kafka.listener.ConcurrentMessageListenerContainer [main] Failed to check topic existence
org.apache.kafka.common.KafkaException: Failed to create new KafkaAdminClient
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:407)
	at org.apache.kafka.clients.admin.AdminClient.create(AdminClient.java:65)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.checkTopics(AbstractMessageListenerContainer.java:353)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:144)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:367)
	... 29 common frames omitted
2020-04-26 02:26:54,811 ERROR org.springframework.boot.SpringApplication [main] Application run failed
org.springframework.context.ApplicationContextException: Failed to start bean 'org.springframework.kafka.config.internalKafkaListenerEndpointRegistry'; nested exception is org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:185)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:827)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:629)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:207)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumerWithAdjustedProperties(DefaultKafkaConsumerFactory.java:193)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:167)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumer(DefaultKafkaConsumerFactory.java:141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.<init>(KafkaMessageListenerContainer.java:616)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer.doStart(KafkaMessageListenerContainer.java:331)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:184)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	... 22 common frames omitted
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:735)
	... 35 common frames omitted
2020-04-26 02:28:47,972 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication v0.0.1-SNAPSHOT on 192-168-1-137.tpgi.com.au with PID 6265 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/text-search-counter-api-0.0.1-SNAPSHOT.jar started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 02:28:47,974 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 02:28:47,974 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: local
2020-04-26 02:28:49,828 ERROR org.springframework.kafka.listener.ConcurrentMessageListenerContainer [main] Failed to check topic existence
org.apache.kafka.common.KafkaException: Failed to create new KafkaAdminClient
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:407)
	at org.apache.kafka.clients.admin.AdminClient.create(AdminClient.java:65)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.checkTopics(AbstractMessageListenerContainer.java:353)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:144)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:367)
	... 29 common frames omitted
2020-04-26 02:28:49,934 ERROR org.springframework.boot.SpringApplication [main] Application run failed
org.springframework.context.ApplicationContextException: Failed to start bean 'org.springframework.kafka.config.internalKafkaListenerEndpointRegistry'; nested exception is org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:185)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:827)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:629)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:207)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumerWithAdjustedProperties(DefaultKafkaConsumerFactory.java:193)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:167)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumer(DefaultKafkaConsumerFactory.java:141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.<init>(KafkaMessageListenerContainer.java:616)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer.doStart(KafkaMessageListenerContainer.java:331)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:184)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	... 22 common frames omitted
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:735)
	... 35 common frames omitted
2020-04-26 02:31:11,033 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication v0.0.1-SNAPSHOT on 192-168-1-137.tpgi.com.au with PID 6314 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/text-search-counter-api-0.0.1-SNAPSHOT.jar started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 02:31:11,035 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 02:31:11,035 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: dev
2020-04-26 02:31:13,233 INFO com.counter.text.TextCounterSpringBootApplication [main] Started TextCounterSpringBootApplication in 2.537 seconds (JVM running for 2.989)
2020-04-26 02:31:13,240 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed suscipit metus, sit amet tristique purus. Etiam sit amet
2020-04-26 02:31:13,302 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> leo sollicitudin, tincidunt lectus vel, ultricies mauris. Donec ultrices lorem in est eleifend, et feugiat libero semper. Duis
2020-04-26 02:31:13,303 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sodales gravida sapien eget efficitur. Ut mattis mollis blandit. Duis nec metus gravida, posuere dolor id, pretium urna.
2020-04-26 02:31:13,303 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Aliquam vitae purus ex. Etiam vitae ipsum leo. Integer blandit, arcu eget commodo scelerisque, risus leo aliquet diam, in
2020-04-26 02:31:13,303 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sagittis metus ex sed elit. Duis vel urna non est fringilla rutrum. Ut molestie sed risus in pharetra. Maecenas eget ante at
2020-04-26 02:31:13,303 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> nulla feugiat euismod. Suspendisse pharetra porttitor lacus non tristique.
2020-04-26 02:31:13,304 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Vivamus varius posuere ligula. Nullam magna metus, elementum vel elementum eu, elementum non magna. Ut cursus
2020-04-26 02:31:13,304 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> arcu vel ligula mollis, in interdum velit maximus. Pellentesque arcu lorem, porttitor et quam vitae, imperdiet venenatis
2020-04-26 02:31:13,304 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> magna. Etiam imperdiet erat vel lectus rhoncus sollicitudin. Praesent at mi a est suscipit tempor sed eu diam. In hac
2020-04-26 02:31:13,304 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> habitasse platea dictumst. Morbi erat mi, iaculis id hendrerit a, sollicitudin et ligula. Vivamus justo nibh, cursus at ultricies
2020-04-26 02:31:13,304 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sed, varius iaculis enim.
2020-04-26 02:31:13,305 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec consequat luctus sapien, quis aliquam ante tristique sit amet. Pellentesque accumsan sollicitudin mi a blandit.
2020-04-26 02:31:13,305 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec ac dui bibendum, pharetra nulla vitae, iaculis purus. Donec fermentum porttitor mollis. Mauris cursus fringilla ex,
2020-04-26 02:31:13,305 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> eget ullamcorper ipsum lacinia in. Nam eget vehicula dui. In eget turpis convallis, ultrices neque vitae, interdum turpis.
2020-04-26 02:31:13,305 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nullam non aliquam sapien, eget volutpat elit. Cras pharetra ex a orci faucibus tristique at ullamcorper nibh. Proin nec
2020-04-26 02:31:13,305 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> lacinia ante, eu rutrum sem.
2020-04-26 02:31:13,306 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Curabitur id libero purus. Vivamus vel velit turpis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Donec
2020-04-26 02:31:13,306 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> at urna eget augue efficitur porttitor at eu elit. Fusce feugiat tempor nulla, at euismod lacus tincidunt sed. Curabitur
2020-04-26 02:31:13,306 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ullamcorper dignissim nisl, eget iaculis orci vestibulum sed. Ut consectetur consectetur urna vestibulum ultricies.
2020-04-26 02:31:13,306 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Maecenas non felis arcu. Fusce in tortor metus. Vestibulum vel felis ut lorem ultricies pretium quis ut metus. Aliquam erat
2020-04-26 02:31:13,306 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> volutpat. Praesent a lorem porttitor, venenatis nisl volutpat, placerat dui. Vivamus ut justo eu orci tincidunt malesuada.
2020-04-26 02:31:13,306 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Interdum et malesuada fames ac ante ipsum primis in faucibus. Etiam facilisis nulla vel leo pretium varius.
2020-04-26 02:31:13,307 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Fusce eleifend tincidunt lacinia. Duis maximus, sapien ac fringilla pretium, augue leo aliquam ligula, quis rutrum leo sem
2020-04-26 02:31:13,307 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> vel magna. Duis commodo lobortis dui, ut rhoncus dolor. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 02:31:13,307 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> per inceptos himenaeos. Nam nec augue augue. Quisque eu orci arcu. Aliquam neque odio, eleifend a dolor sed, dapibus
2020-04-26 02:31:13,314 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> auctor justo. Aliquam sollicitudin arcu sit amet odio gravida, nec viverra nulla efficitur. Phasellus sed libero rutrum lacus
2020-04-26 02:31:13,315 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sollicitudin mattis. Sed fermentum sapien ac dolor elementum, quis vehicula sem tempus.
2020-04-26 02:31:13,315 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Etiam et orci non orci lobortis dictum id vitae massa. Aenean eu erat nulla. Sed posuere ullamcorper magna, tempor
2020-04-26 02:31:13,315 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ultrices justo feugiat rhoncus. Cras fringilla ligula nec euismod tristique. Duis vitae enim eget augue consectetur ultricies.
2020-04-26 02:31:13,315 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nam laoreet sapien at dictum consectetur. Suspendisse tristique purus neque, ut blandit nunc tincidunt et.
2020-04-26 02:31:13,315 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Duis pretium condimentum diam id viverra. Pellentesque sit amet dapibus eros, ac auctor lectus. Praesent eget tellus
2020-04-26 02:31:13,315 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> purus. Proin vel nisl sit amet orci laoreet faucibus eget eu nisi. Nulla id pharetra arcu. Lorem ipsum dolor sit amet,
2020-04-26 02:31:13,316 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> consectetur adipiscing elit. Vivamus ornare lectus eu metus venenatis, quis porttitor nibh convallis. Nulla nunc metus,
2020-04-26 02:31:13,316 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> tristique quis dui sed, interdum imperdiet nisl. Vestibulum mattis tincidunt lacus, imperdiet mattis libero varius rhoncus.
2020-04-26 02:31:13,316 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nam in auctor nisl. Nunc tincidunt accumsan pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 02:31:13,316 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> per inceptos himenaeos. Mauris luctus scelerisque augue, vel finibus ligula semper vel. Lorem ipsum dolor sit amet,
2020-04-26 02:31:13,316 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> consectetur adipiscing elit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.
2020-04-26 02:31:13,316 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nunc ultricies vel nunc eget mollis.
2020-04-26 02:31:13,317 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec ligula felis, ultrices vel blandit ut, hendrerit vel turpis. Duis faucibus dapibus mi ac semper. Duis id tortor tempus
2020-04-26 02:31:13,317 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> augue euismod tempus. Integer vehicula velit ut leo blandit sagittis. Vestibulum ante ipsum primis in faucibus orci luctus et
2020-04-26 02:31:13,317 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ultrices posuere cubilia Curae; Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis
2020-04-26 02:31:13,317 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> egestas. Nunc ut urna vel metus molestie venenatis nec non dui. Integer diam metus, aliquam a gravida et, varius id nulla.
2020-04-26 02:31:13,317 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nunc non porttitor ipsum. Aliquam sapien enim, eleifend nec nunc id, tempus tempus ex. Vivamus nec urna ornare,
2020-04-26 02:31:13,317 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> finibus leo at, posuere urna. Aenean est mi, porta ac gravida at, hendrerit quis elit. Quisque urna mauris, lobortis sit amet
2020-04-26 02:31:13,317 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> tortor eget, laoreet consectetur tortor. Suspendisse id imperdiet nisl, eget pellentesque tortor. Maecenas sit amet mi et ex
2020-04-26 02:31:13,318 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ornare porta sollicitudin vitae tellus. Donec nulla lorem, imperdiet non sodales vitae, congue quis sapien. Quisque nec
2020-04-26 02:31:13,318 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> mattis lacus. Sed dapibus nisi nec libero ornare, in accumsan dolor porttitor. Praesent sodales commodo ultricies.
2020-04-26 02:31:13,318 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Cras id ipsum vestibulum,
2020-04-26 02:31:13,318 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> venenatis eros vitae, maximus magna. Mauris eu blandit tortor, condimentum eleifend dolor.
2020-04-26 02:31:13,318 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Cras eu tellus feugiat, lobortis metus ac, consectetur orci. Phasellus bibendum tincidunt massa non venenatis. Nunc sed
2020-04-26 02:31:13,318 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> molestie metus, vel elementum tortor. Duis malesuada porta nisl ac molestie. In a tellus faucibus, convallis nunc nec,
2020-04-26 02:31:13,318 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sodales lacus. Donec vulputate interdum massa sed posuere. In dapibus eu ligula at sodales. Sed facilisis a sem eget
2020-04-26 02:31:13,318 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> lobortis. Ut viverra ipsum dictum pharetra auctor. Duis tincidunt nulla sapien, sit amet facilisis ante rhoncus eu. Aliquam
2020-04-26 02:31:13,319 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> luctus dolor tortor, vitae interdum felis elementum eget. Nam mattis leo gravida ex elementum, id facilisis lacus ornare.
2020-04-26 02:36:58,329 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication v0.0.1-SNAPSHOT on 192-168-1-137.tpgi.com.au with PID 6410 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/text-search-counter-api-0.0.1-SNAPSHOT.jar started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 02:36:58,330 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 02:36:58,330 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: prod
2020-04-26 02:37:00,283 ERROR org.springframework.kafka.listener.ConcurrentMessageListenerContainer [main] Failed to check topic existence
org.apache.kafka.common.KafkaException: Failed to create new KafkaAdminClient
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:407)
	at org.apache.kafka.clients.admin.AdminClient.create(AdminClient.java:65)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.checkTopics(AbstractMessageListenerContainer.java:353)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:144)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:367)
	... 29 common frames omitted
2020-04-26 02:37:00,374 ERROR org.springframework.boot.SpringApplication [main] Application run failed
org.springframework.context.ApplicationContextException: Failed to start bean 'org.springframework.kafka.config.internalKafkaListenerEndpointRegistry'; nested exception is org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:185)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:827)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:629)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:207)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumerWithAdjustedProperties(DefaultKafkaConsumerFactory.java:193)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:167)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumer(DefaultKafkaConsumerFactory.java:141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.<init>(KafkaMessageListenerContainer.java:616)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer.doStart(KafkaMessageListenerContainer.java:331)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:184)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	... 22 common frames omitted
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:735)
	... 35 common frames omitted
2020-04-26 02:49:06,875 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication v0.0.1-SNAPSHOT on 192-168-1-137.tpgi.com.au with PID 6805 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/text-search-counter-api-0.0.1-SNAPSHOT.jar started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 02:49:06,877 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 02:49:06,877 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: dev
2020-04-26 02:49:09,216 INFO com.counter.text.TextCounterSpringBootApplication [main] Started TextCounterSpringBootApplication in 2.675 seconds (JVM running for 3.131)
2020-04-26 02:49:09,224 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed suscipit metus, sit amet tristique purus. Etiam sit amet
2020-04-26 02:49:09,287 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> leo sollicitudin, tincidunt lectus vel, ultricies mauris. Donec ultrices lorem in est eleifend, et feugiat libero semper. Duis
2020-04-26 02:49:09,288 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sodales gravida sapien eget efficitur. Ut mattis mollis blandit. Duis nec metus gravida, posuere dolor id, pretium urna.
2020-04-26 02:49:09,288 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Aliquam vitae purus ex. Etiam vitae ipsum leo. Integer blandit, arcu eget commodo scelerisque, risus leo aliquet diam, in
2020-04-26 02:49:09,288 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sagittis metus ex sed elit. Duis vel urna non est fringilla rutrum. Ut molestie sed risus in pharetra. Maecenas eget ante at
2020-04-26 02:49:09,289 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> nulla feugiat euismod. Suspendisse pharetra porttitor lacus non tristique.
2020-04-26 02:49:09,289 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Vivamus varius posuere ligula. Nullam magna metus, elementum vel elementum eu, elementum non magna. Ut cursus
2020-04-26 02:49:09,289 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> arcu vel ligula mollis, in interdum velit maximus. Pellentesque arcu lorem, porttitor et quam vitae, imperdiet venenatis
2020-04-26 02:49:09,289 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> magna. Etiam imperdiet erat vel lectus rhoncus sollicitudin. Praesent at mi a est suscipit tempor sed eu diam. In hac
2020-04-26 02:49:09,289 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> habitasse platea dictumst. Morbi erat mi, iaculis id hendrerit a, sollicitudin et ligula. Vivamus justo nibh, cursus at ultricies
2020-04-26 02:49:09,290 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sed, varius iaculis enim.
2020-04-26 02:49:09,290 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec consequat luctus sapien, quis aliquam ante tristique sit amet. Pellentesque accumsan sollicitudin mi a blandit.
2020-04-26 02:49:09,290 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec ac dui bibendum, pharetra nulla vitae, iaculis purus. Donec fermentum porttitor mollis. Mauris cursus fringilla ex,
2020-04-26 02:49:09,290 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> eget ullamcorper ipsum lacinia in. Nam eget vehicula dui. In eget turpis convallis, ultrices neque vitae, interdum turpis.
2020-04-26 02:49:09,290 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nullam non aliquam sapien, eget volutpat elit. Cras pharetra ex a orci faucibus tristique at ullamcorper nibh. Proin nec
2020-04-26 02:49:09,290 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> lacinia ante, eu rutrum sem.
2020-04-26 02:49:09,291 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Curabitur id libero purus. Vivamus vel velit turpis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Donec
2020-04-26 02:49:09,291 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> at urna eget augue efficitur porttitor at eu elit. Fusce feugiat tempor nulla, at euismod lacus tincidunt sed. Curabitur
2020-04-26 02:49:09,291 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ullamcorper dignissim nisl, eget iaculis orci vestibulum sed. Ut consectetur consectetur urna vestibulum ultricies.
2020-04-26 02:49:09,291 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Maecenas non felis arcu. Fusce in tortor metus. Vestibulum vel felis ut lorem ultricies pretium quis ut metus. Aliquam erat
2020-04-26 02:49:09,291 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> volutpat. Praesent a lorem porttitor, venenatis nisl volutpat, placerat dui. Vivamus ut justo eu orci tincidunt malesuada.
2020-04-26 02:49:09,292 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Interdum et malesuada fames ac ante ipsum primis in faucibus. Etiam facilisis nulla vel leo pretium varius.
2020-04-26 02:49:09,292 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Fusce eleifend tincidunt lacinia. Duis maximus, sapien ac fringilla pretium, augue leo aliquam ligula, quis rutrum leo sem
2020-04-26 02:49:09,292 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> vel magna. Duis commodo lobortis dui, ut rhoncus dolor. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 02:49:09,292 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> per inceptos himenaeos. Nam nec augue augue. Quisque eu orci arcu. Aliquam neque odio, eleifend a dolor sed, dapibus
2020-04-26 02:49:09,292 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> auctor justo. Aliquam sollicitudin arcu sit amet odio gravida, nec viverra nulla efficitur. Phasellus sed libero rutrum lacus
2020-04-26 02:49:09,292 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sollicitudin mattis. Sed fermentum sapien ac dolor elementum, quis vehicula sem tempus.
2020-04-26 02:49:09,292 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Etiam et orci non orci lobortis dictum id vitae massa. Aenean eu erat nulla. Sed posuere ullamcorper magna, tempor
2020-04-26 02:49:09,293 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ultrices justo feugiat rhoncus. Cras fringilla ligula nec euismod tristique. Duis vitae enim eget augue consectetur ultricies.
2020-04-26 02:49:09,293 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nam laoreet sapien at dictum consectetur. Suspendisse tristique purus neque, ut blandit nunc tincidunt et.
2020-04-26 02:49:09,293 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Duis pretium condimentum diam id viverra. Pellentesque sit amet dapibus eros, ac auctor lectus. Praesent eget tellus
2020-04-26 02:49:09,293 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> purus. Proin vel nisl sit amet orci laoreet faucibus eget eu nisi. Nulla id pharetra arcu. Lorem ipsum dolor sit amet,
2020-04-26 02:49:09,293 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> consectetur adipiscing elit. Vivamus ornare lectus eu metus venenatis, quis porttitor nibh convallis. Nulla nunc metus,
2020-04-26 02:49:09,293 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> tristique quis dui sed, interdum imperdiet nisl. Vestibulum mattis tincidunt lacus, imperdiet mattis libero varius rhoncus.
2020-04-26 02:49:09,293 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nam in auctor nisl. Nunc tincidunt accumsan pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 02:49:09,293 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> per inceptos himenaeos. Mauris luctus scelerisque augue, vel finibus ligula semper vel. Lorem ipsum dolor sit amet,
2020-04-26 02:49:09,294 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> consectetur adipiscing elit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.
2020-04-26 02:49:09,294 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nunc ultricies vel nunc eget mollis.
2020-04-26 02:49:09,294 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec ligula felis, ultrices vel blandit ut, hendrerit vel turpis. Duis faucibus dapibus mi ac semper. Duis id tortor tempus
2020-04-26 02:49:09,294 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> augue euismod tempus. Integer vehicula velit ut leo blandit sagittis. Vestibulum ante ipsum primis in faucibus orci luctus et
2020-04-26 02:49:09,294 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ultrices posuere cubilia Curae; Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis
2020-04-26 02:49:09,294 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> egestas. Nunc ut urna vel metus molestie venenatis nec non dui. Integer diam metus, aliquam a gravida et, varius id nulla.
2020-04-26 02:49:09,294 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nunc non porttitor ipsum. Aliquam sapien enim, eleifend nec nunc id, tempus tempus ex. Vivamus nec urna ornare,
2020-04-26 02:49:09,295 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> finibus leo at, posuere urna. Aenean est mi, porta ac gravida at, hendrerit quis elit. Quisque urna mauris, lobortis sit amet
2020-04-26 02:49:09,295 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> tortor eget, laoreet consectetur tortor. Suspendisse id imperdiet nisl, eget pellentesque tortor. Maecenas sit amet mi et ex
2020-04-26 02:49:09,295 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ornare porta sollicitudin vitae tellus. Donec nulla lorem, imperdiet non sodales vitae, congue quis sapien. Quisque nec
2020-04-26 02:49:09,295 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> mattis lacus. Sed dapibus nisi nec libero ornare, in accumsan dolor porttitor. Praesent sodales commodo ultricies.
2020-04-26 02:49:09,295 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Cras id ipsum vestibulum,
2020-04-26 02:49:09,295 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> venenatis eros vitae, maximus magna. Mauris eu blandit tortor, condimentum eleifend dolor.
2020-04-26 02:49:09,295 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Cras eu tellus feugiat, lobortis metus ac, consectetur orci. Phasellus bibendum tincidunt massa non venenatis. Nunc sed
2020-04-26 02:49:09,295 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> molestie metus, vel elementum tortor. Duis malesuada porta nisl ac molestie. In a tellus faucibus, convallis nunc nec,
2020-04-26 02:49:09,295 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sodales lacus. Donec vulputate interdum massa sed posuere. In dapibus eu ligula at sodales. Sed facilisis a sem eget
2020-04-26 02:49:09,296 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> lobortis. Ut viverra ipsum dictum pharetra auctor. Duis tincidunt nulla sapien, sit amet facilisis ante rhoncus eu. Aliquam
2020-04-26 02:49:09,296 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> luctus dolor tortor, vitae interdum felis elementum eget. Nam mattis leo gravida ex elementum, id facilisis lacus ornare.
2020-04-26 02:49:10,138 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed suscipit metus, sit amet tristique purus. Etiam sit amet
2020-04-26 02:49:10,140 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> leo sollicitudin, tincidunt lectus vel, ultricies mauris. Donec ultrices lorem in est eleifend, et feugiat libero semper. Duis
2020-04-26 02:49:10,141 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sodales gravida sapien eget efficitur. Ut mattis mollis blandit. Duis nec metus gravida, posuere dolor id, pretium urna.
2020-04-26 02:49:10,141 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Aliquam vitae purus ex. Etiam vitae ipsum leo. Integer blandit, arcu eget commodo scelerisque, risus leo aliquet diam, in
2020-04-26 02:49:10,141 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sagittis metus ex sed elit. Duis vel urna non est fringilla rutrum. Ut molestie sed risus in pharetra. Maecenas eget ante at
2020-04-26 02:49:10,142 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> nulla feugiat euismod. Suspendisse pharetra porttitor lacus non tristique.
2020-04-26 02:49:10,142 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Vivamus varius posuere ligula. Nullam magna metus, elementum vel elementum eu, elementum non magna. Ut cursus
2020-04-26 02:49:10,142 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> arcu vel ligula mollis, in interdum velit maximus. Pellentesque arcu lorem, porttitor et quam vitae, imperdiet venenatis
2020-04-26 02:49:10,142 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> magna. Etiam imperdiet erat vel lectus rhoncus sollicitudin. Praesent at mi a est suscipit tempor sed eu diam. In hac
2020-04-26 02:49:10,143 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> habitasse platea dictumst. Morbi erat mi, iaculis id hendrerit a, sollicitudin et ligula. Vivamus justo nibh, cursus at ultricies
2020-04-26 02:49:10,143 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sed, varius iaculis enim.
2020-04-26 02:49:10,143 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec consequat luctus sapien, quis aliquam ante tristique sit amet. Pellentesque accumsan sollicitudin mi a blandit.
2020-04-26 02:49:10,143 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec ac dui bibendum, pharetra nulla vitae, iaculis purus. Donec fermentum porttitor mollis. Mauris cursus fringilla ex,
2020-04-26 02:49:10,143 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> eget ullamcorper ipsum lacinia in. Nam eget vehicula dui. In eget turpis convallis, ultrices neque vitae, interdum turpis.
2020-04-26 02:49:10,143 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nullam non aliquam sapien, eget volutpat elit. Cras pharetra ex a orci faucibus tristique at ullamcorper nibh. Proin nec
2020-04-26 02:49:10,144 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> lacinia ante, eu rutrum sem.
2020-04-26 02:49:10,144 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Curabitur id libero purus. Vivamus vel velit turpis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Donec
2020-04-26 02:49:10,144 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> at urna eget augue efficitur porttitor at eu elit. Fusce feugiat tempor nulla, at euismod lacus tincidunt sed. Curabitur
2020-04-26 02:49:10,145 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ullamcorper dignissim nisl, eget iaculis orci vestibulum sed. Ut consectetur consectetur urna vestibulum ultricies.
2020-04-26 02:49:10,145 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Maecenas non felis arcu. Fusce in tortor metus. Vestibulum vel felis ut lorem ultricies pretium quis ut metus. Aliquam erat
2020-04-26 02:49:10,145 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> volutpat. Praesent a lorem porttitor, venenatis nisl volutpat, placerat dui. Vivamus ut justo eu orci tincidunt malesuada.
2020-04-26 02:49:10,145 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Interdum et malesuada fames ac ante ipsum primis in faucibus. Etiam facilisis nulla vel leo pretium varius.
2020-04-26 02:49:10,145 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Fusce eleifend tincidunt lacinia. Duis maximus, sapien ac fringilla pretium, augue leo aliquam ligula, quis rutrum leo sem
2020-04-26 02:49:10,146 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> vel magna. Duis commodo lobortis dui, ut rhoncus dolor. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 02:49:10,146 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> per inceptos himenaeos. Nam nec augue augue. Quisque eu orci arcu. Aliquam neque odio, eleifend a dolor sed, dapibus
2020-04-26 02:49:10,146 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> auctor justo. Aliquam sollicitudin arcu sit amet odio gravida, nec viverra nulla efficitur. Phasellus sed libero rutrum lacus
2020-04-26 02:49:10,146 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sollicitudin mattis. Sed fermentum sapien ac dolor elementum, quis vehicula sem tempus.
2020-04-26 02:49:10,146 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Etiam et orci non orci lobortis dictum id vitae massa. Aenean eu erat nulla. Sed posuere ullamcorper magna, tempor
2020-04-26 02:49:10,147 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ultrices justo feugiat rhoncus. Cras fringilla ligula nec euismod tristique. Duis vitae enim eget augue consectetur ultricies.
2020-04-26 02:49:10,147 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nam laoreet sapien at dictum consectetur. Suspendisse tristique purus neque, ut blandit nunc tincidunt et.
2020-04-26 02:49:10,147 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Duis pretium condimentum diam id viverra. Pellentesque sit amet dapibus eros, ac auctor lectus. Praesent eget tellus
2020-04-26 02:49:10,147 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> purus. Proin vel nisl sit amet orci laoreet faucibus eget eu nisi. Nulla id pharetra arcu. Lorem ipsum dolor sit amet,
2020-04-26 02:49:10,147 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> consectetur adipiscing elit. Vivamus ornare lectus eu metus venenatis, quis porttitor nibh convallis. Nulla nunc metus,
2020-04-26 02:49:10,148 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> tristique quis dui sed, interdum imperdiet nisl. Vestibulum mattis tincidunt lacus, imperdiet mattis libero varius rhoncus.
2020-04-26 02:49:10,148 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nam in auctor nisl. Nunc tincidunt accumsan pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 02:49:10,148 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> per inceptos himenaeos. Mauris luctus scelerisque augue, vel finibus ligula semper vel. Lorem ipsum dolor sit amet,
2020-04-26 02:49:10,148 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> consectetur adipiscing elit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.
2020-04-26 02:49:10,148 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nunc ultricies vel nunc eget mollis.
2020-04-26 02:49:10,148 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec ligula felis, ultrices vel blandit ut, hendrerit vel turpis. Duis faucibus dapibus mi ac semper. Duis id tortor tempus
2020-04-26 02:49:10,149 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> augue euismod tempus. Integer vehicula velit ut leo blandit sagittis. Vestibulum ante ipsum primis in faucibus orci luctus et
2020-04-26 02:49:10,149 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ultrices posuere cubilia Curae; Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis
2020-04-26 02:49:10,149 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> egestas. Nunc ut urna vel metus molestie venenatis nec non dui. Integer diam metus, aliquam a gravida et, varius id nulla.
2020-04-26 02:49:10,149 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nunc non porttitor ipsum. Aliquam sapien enim, eleifend nec nunc id, tempus tempus ex. Vivamus nec urna ornare,
2020-04-26 02:49:10,149 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> finibus leo at, posuere urna. Aenean est mi, porta ac gravida at, hendrerit quis elit. Quisque urna mauris, lobortis sit amet
2020-04-26 02:49:10,149 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> tortor eget, laoreet consectetur tortor. Suspendisse id imperdiet nisl, eget pellentesque tortor. Maecenas sit amet mi et ex
2020-04-26 02:49:10,150 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ornare porta sollicitudin vitae tellus. Donec nulla lorem, imperdiet non sodales vitae, congue quis sapien. Quisque nec
2020-04-26 02:49:10,150 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> mattis lacus. Sed dapibus nisi nec libero ornare, in accumsan dolor porttitor. Praesent sodales commodo ultricies.
2020-04-26 02:49:10,150 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Cras id ipsum vestibulum,
2020-04-26 02:49:10,150 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> venenatis eros vitae, maximus magna. Mauris eu blandit tortor, condimentum eleifend dolor.
2020-04-26 02:49:10,150 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Cras eu tellus feugiat, lobortis metus ac, consectetur orci. Phasellus bibendum tincidunt massa non venenatis. Nunc sed
2020-04-26 02:49:10,150 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> molestie metus, vel elementum tortor. Duis malesuada porta nisl ac molestie. In a tellus faucibus, convallis nunc nec,
2020-04-26 02:49:10,151 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sodales lacus. Donec vulputate interdum massa sed posuere. In dapibus eu ligula at sodales. Sed facilisis a sem eget
2020-04-26 02:49:10,151 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> lobortis. Ut viverra ipsum dictum pharetra auctor. Duis tincidunt nulla sapien, sit amet facilisis ante rhoncus eu. Aliquam
2020-04-26 02:49:10,151 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> luctus dolor tortor, vitae interdum felis elementum eget. Nam mattis leo gravida ex elementum, id facilisis lacus ornare.
2020-04-26 02:54:51,741 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication v0.0.1-SNAPSHOT on 192-168-1-137.tpgi.com.au with PID 6868 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/text-search-counter-api-0.0.1-SNAPSHOT.jar started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 02:54:51,743 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 02:54:51,743 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: default
2020-04-26 02:54:53,521 ERROR org.springframework.kafka.listener.ConcurrentMessageListenerContainer [main] Failed to check topic existence
org.apache.kafka.common.KafkaException: Failed to create new KafkaAdminClient
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:407)
	at org.apache.kafka.clients.admin.AdminClient.create(AdminClient.java:65)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.checkTopics(AbstractMessageListenerContainer.java:353)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:144)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:367)
	... 29 common frames omitted
2020-04-26 02:54:53,591 ERROR org.springframework.boot.SpringApplication [main] Application run failed
org.springframework.context.ApplicationContextException: Failed to start bean 'org.springframework.kafka.config.internalKafkaListenerEndpointRegistry'; nested exception is org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:185)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:827)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:629)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:207)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumerWithAdjustedProperties(DefaultKafkaConsumerFactory.java:193)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:167)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumer(DefaultKafkaConsumerFactory.java:141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.<init>(KafkaMessageListenerContainer.java:616)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer.doStart(KafkaMessageListenerContainer.java:331)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:184)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	... 22 common frames omitted
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:735)
	... 35 common frames omitted
2020-04-26 02:58:14,714 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication v0.0.1-SNAPSHOT on 192-168-1-137.tpgi.com.au with PID 6897 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/text-search-counter-api-0.0.1-SNAPSHOT.jar started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 02:58:14,716 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 02:58:14,716 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: local
2020-04-26 02:58:17,153 ERROR org.springframework.kafka.listener.ConcurrentMessageListenerContainer [main] Failed to check topic existence
org.apache.kafka.common.KafkaException: Failed to create new KafkaAdminClient
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:407)
	at org.apache.kafka.clients.admin.AdminClient.create(AdminClient.java:65)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.checkTopics(AbstractMessageListenerContainer.java:353)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:144)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.admin.KafkaAdminClient.createInternal(KafkaAdminClient.java:367)
	... 29 common frames omitted
2020-04-26 02:58:17,250 ERROR org.springframework.boot.SpringApplication [main] Application run failed
org.springframework.context.ApplicationContextException: Failed to start bean 'org.springframework.kafka.config.internalKafkaListenerEndpointRegistry'; nested exception is org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:185)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.counter.text.TextCounterSpringBootApplication.main(TextCounterSpringBootApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:827)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:629)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:207)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumerWithAdjustedProperties(DefaultKafkaConsumerFactory.java:193)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createKafkaConsumer(DefaultKafkaConsumerFactory.java:167)
	at org.springframework.kafka.core.DefaultKafkaConsumerFactory.createConsumer(DefaultKafkaConsumerFactory.java:141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.<init>(KafkaMessageListenerContainer.java:616)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer.doStart(KafkaMessageListenerContainer.java:331)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:184)
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312)
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	... 22 common frames omitted
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:88)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:47)
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:735)
	... 35 common frames omitted
2020-04-26 03:24:15,064 INFO com.counter.text.TextCounterSpringBootApplication [main] Starting TextCounterSpringBootApplication on 192-168-1-137.tpgi.com.au with PID 7379 (/Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api/target/classes started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 03:24:15,065 DEBUG com.counter.text.TextCounterSpringBootApplication [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 03:24:15,066 INFO com.counter.text.TextCounterSpringBootApplication [main] The following profiles are active: dev
2020-04-26 03:24:16,864 INFO com.counter.text.TextCounterSpringBootApplication [main] Started TextCounterSpringBootApplication in 2.14 seconds (JVM running for 2.522)
2020-04-26 03:24:16,869 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed suscipit metus, sit amet tristique purus. Etiam sit amet
2020-04-26 03:24:16,904 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> leo sollicitudin, tincidunt lectus vel, ultricies mauris. Donec ultrices lorem in est eleifend, et feugiat libero semper. Duis
2020-04-26 03:24:16,904 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sodales gravida sapien eget efficitur. Ut mattis mollis blandit. Duis nec metus gravida, posuere dolor id, pretium urna.
2020-04-26 03:24:16,904 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Aliquam vitae purus ex. Etiam vitae ipsum leo. Integer blandit, arcu eget commodo scelerisque, risus leo aliquet diam, in
2020-04-26 03:24:16,904 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sagittis metus ex sed elit. Duis vel urna non est fringilla rutrum. Ut molestie sed risus in pharetra. Maecenas eget ante at
2020-04-26 03:24:16,904 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> nulla feugiat euismod. Suspendisse pharetra porttitor lacus non tristique.
2020-04-26 03:24:16,904 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Vivamus varius posuere ligula. Nullam magna metus, elementum vel elementum eu, elementum non magna. Ut cursus
2020-04-26 03:24:16,905 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> arcu vel ligula mollis, in interdum velit maximus. Pellentesque arcu lorem, porttitor et quam vitae, imperdiet venenatis
2020-04-26 03:24:16,905 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> magna. Etiam imperdiet erat vel lectus rhoncus sollicitudin. Praesent at mi a est suscipit tempor sed eu diam. In hac
2020-04-26 03:24:16,905 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> habitasse platea dictumst. Morbi erat mi, iaculis id hendrerit a, sollicitudin et ligula. Vivamus justo nibh, cursus at ultricies
2020-04-26 03:24:16,905 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sed, varius iaculis enim.
2020-04-26 03:24:16,905 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec consequat luctus sapien, quis aliquam ante tristique sit amet. Pellentesque accumsan sollicitudin mi a blandit.
2020-04-26 03:24:16,905 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec ac dui bibendum, pharetra nulla vitae, iaculis purus. Donec fermentum porttitor mollis. Mauris cursus fringilla ex,
2020-04-26 03:24:16,905 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> eget ullamcorper ipsum lacinia in. Nam eget vehicula dui. In eget turpis convallis, ultrices neque vitae, interdum turpis.
2020-04-26 03:24:16,906 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nullam non aliquam sapien, eget volutpat elit. Cras pharetra ex a orci faucibus tristique at ullamcorper nibh. Proin nec
2020-04-26 03:24:16,906 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> lacinia ante, eu rutrum sem.
2020-04-26 03:24:16,906 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Curabitur id libero purus. Vivamus vel velit turpis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Donec
2020-04-26 03:24:16,906 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> at urna eget augue efficitur porttitor at eu elit. Fusce feugiat tempor nulla, at euismod lacus tincidunt sed. Curabitur
2020-04-26 03:24:16,906 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ullamcorper dignissim nisl, eget iaculis orci vestibulum sed. Ut consectetur consectetur urna vestibulum ultricies.
2020-04-26 03:24:16,906 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Maecenas non felis arcu. Fusce in tortor metus. Vestibulum vel felis ut lorem ultricies pretium quis ut metus. Aliquam erat
2020-04-26 03:24:16,906 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> volutpat. Praesent a lorem porttitor, venenatis nisl volutpat, placerat dui. Vivamus ut justo eu orci tincidunt malesuada.
2020-04-26 03:24:16,906 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Interdum et malesuada fames ac ante ipsum primis in faucibus. Etiam facilisis nulla vel leo pretium varius.
2020-04-26 03:24:16,906 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Fusce eleifend tincidunt lacinia. Duis maximus, sapien ac fringilla pretium, augue leo aliquam ligula, quis rutrum leo sem
2020-04-26 03:24:16,907 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> vel magna. Duis commodo lobortis dui, ut rhoncus dolor. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 03:24:16,907 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> per inceptos himenaeos. Nam nec augue augue. Quisque eu orci arcu. Aliquam neque odio, eleifend a dolor sed, dapibus
2020-04-26 03:24:16,907 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> auctor justo. Aliquam sollicitudin arcu sit amet odio gravida, nec viverra nulla efficitur. Phasellus sed libero rutrum lacus
2020-04-26 03:24:16,907 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sollicitudin mattis. Sed fermentum sapien ac dolor elementum, quis vehicula sem tempus.
2020-04-26 03:24:16,907 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Etiam et orci non orci lobortis dictum id vitae massa. Aenean eu erat nulla. Sed posuere ullamcorper magna, tempor
2020-04-26 03:24:16,907 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ultrices justo feugiat rhoncus. Cras fringilla ligula nec euismod tristique. Duis vitae enim eget augue consectetur ultricies.
2020-04-26 03:24:16,907 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nam laoreet sapien at dictum consectetur. Suspendisse tristique purus neque, ut blandit nunc tincidunt et.
2020-04-26 03:24:16,907 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Duis pretium condimentum diam id viverra. Pellentesque sit amet dapibus eros, ac auctor lectus. Praesent eget tellus
2020-04-26 03:24:16,907 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> purus. Proin vel nisl sit amet orci laoreet faucibus eget eu nisi. Nulla id pharetra arcu. Lorem ipsum dolor sit amet,
2020-04-26 03:24:16,907 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> consectetur adipiscing elit. Vivamus ornare lectus eu metus venenatis, quis porttitor nibh convallis. Nulla nunc metus,
2020-04-26 03:24:16,908 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> tristique quis dui sed, interdum imperdiet nisl. Vestibulum mattis tincidunt lacus, imperdiet mattis libero varius rhoncus.
2020-04-26 03:24:16,908 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nam in auctor nisl. Nunc tincidunt accumsan pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 03:24:16,908 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> per inceptos himenaeos. Mauris luctus scelerisque augue, vel finibus ligula semper vel. Lorem ipsum dolor sit amet,
2020-04-26 03:24:16,908 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> consectetur adipiscing elit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.
2020-04-26 03:24:16,908 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nunc ultricies vel nunc eget mollis.
2020-04-26 03:24:16,908 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Donec ligula felis, ultrices vel blandit ut, hendrerit vel turpis. Duis faucibus dapibus mi ac semper. Duis id tortor tempus
2020-04-26 03:24:16,908 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> augue euismod tempus. Integer vehicula velit ut leo blandit sagittis. Vestibulum ante ipsum primis in faucibus orci luctus et
2020-04-26 03:24:16,908 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ultrices posuere cubilia Curae; Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis
2020-04-26 03:24:16,908 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> egestas. Nunc ut urna vel metus molestie venenatis nec non dui. Integer diam metus, aliquam a gravida et, varius id nulla.
2020-04-26 03:24:16,908 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Nunc non porttitor ipsum. Aliquam sapien enim, eleifend nec nunc id, tempus tempus ex. Vivamus nec urna ornare,
2020-04-26 03:24:16,909 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> finibus leo at, posuere urna. Aenean est mi, porta ac gravida at, hendrerit quis elit. Quisque urna mauris, lobortis sit amet
2020-04-26 03:24:16,909 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> tortor eget, laoreet consectetur tortor. Suspendisse id imperdiet nisl, eget pellentesque tortor. Maecenas sit amet mi et ex
2020-04-26 03:24:16,909 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> ornare porta sollicitudin vitae tellus. Donec nulla lorem, imperdiet non sodales vitae, congue quis sapien. Quisque nec
2020-04-26 03:24:16,909 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> mattis lacus. Sed dapibus nisi nec libero ornare, in accumsan dolor porttitor. Praesent sodales commodo ultricies.
2020-04-26 03:24:16,909 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Cras id ipsum vestibulum,
2020-04-26 03:24:16,909 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> venenatis eros vitae, maximus magna. Mauris eu blandit tortor, condimentum eleifend dolor.
2020-04-26 03:24:16,915 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> Cras eu tellus feugiat, lobortis metus ac, consectetur orci. Phasellus bibendum tincidunt massa non venenatis. Nunc sed
2020-04-26 03:24:16,915 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> molestie metus, vel elementum tortor. Duis malesuada porta nisl ac molestie. In a tellus faucibus, convallis nunc nec,
2020-04-26 03:24:16,915 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> sodales lacus. Donec vulputate interdum massa sed posuere. In dapibus eu ligula at sodales. Sed facilisis a sem eget
2020-04-26 03:24:16,915 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> lobortis. Ut viverra ipsum dictum pharetra auctor. Duis tincidunt nulla sapien, sit amet facilisis ante rhoncus eu. Aliquam
2020-04-26 03:24:16,915 INFO com.counter.text.service.ParagraphLineProducerImpl [main] #### -> Producing message -> luctus dolor tortor, vitae interdum felis elementum eget. Nam mattis leo gravida ex elementum, id facilisis lacus ornare.
2020-04-26 03:24:17,764 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed suscipit metus, sit amet tristique purus. Etiam sit amet
2020-04-26 03:24:17,766 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> leo sollicitudin, tincidunt lectus vel, ultricies mauris. Donec ultrices lorem in est eleifend, et feugiat libero semper. Duis
2020-04-26 03:24:17,766 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sodales gravida sapien eget efficitur. Ut mattis mollis blandit. Duis nec metus gravida, posuere dolor id, pretium urna.
2020-04-26 03:24:17,766 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Aliquam vitae purus ex. Etiam vitae ipsum leo. Integer blandit, arcu eget commodo scelerisque, risus leo aliquet diam, in
2020-04-26 03:24:17,766 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sagittis metus ex sed elit. Duis vel urna non est fringilla rutrum. Ut molestie sed risus in pharetra. Maecenas eget ante at
2020-04-26 03:24:17,767 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> nulla feugiat euismod. Suspendisse pharetra porttitor lacus non tristique.
2020-04-26 03:24:17,767 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Vivamus varius posuere ligula. Nullam magna metus, elementum vel elementum eu, elementum non magna. Ut cursus
2020-04-26 03:24:17,767 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> arcu vel ligula mollis, in interdum velit maximus. Pellentesque arcu lorem, porttitor et quam vitae, imperdiet venenatis
2020-04-26 03:24:17,767 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> magna. Etiam imperdiet erat vel lectus rhoncus sollicitudin. Praesent at mi a est suscipit tempor sed eu diam. In hac
2020-04-26 03:24:17,768 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> habitasse platea dictumst. Morbi erat mi, iaculis id hendrerit a, sollicitudin et ligula. Vivamus justo nibh, cursus at ultricies
2020-04-26 03:24:17,768 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sed, varius iaculis enim.
2020-04-26 03:24:17,768 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec consequat luctus sapien, quis aliquam ante tristique sit amet. Pellentesque accumsan sollicitudin mi a blandit.
2020-04-26 03:24:17,768 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec ac dui bibendum, pharetra nulla vitae, iaculis purus. Donec fermentum porttitor mollis. Mauris cursus fringilla ex,
2020-04-26 03:24:17,768 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> eget ullamcorper ipsum lacinia in. Nam eget vehicula dui. In eget turpis convallis, ultrices neque vitae, interdum turpis.
2020-04-26 03:24:17,768 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nullam non aliquam sapien, eget volutpat elit. Cras pharetra ex a orci faucibus tristique at ullamcorper nibh. Proin nec
2020-04-26 03:24:17,769 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> lacinia ante, eu rutrum sem.
2020-04-26 03:24:17,769 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Curabitur id libero purus. Vivamus vel velit turpis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Donec
2020-04-26 03:24:17,769 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> at urna eget augue efficitur porttitor at eu elit. Fusce feugiat tempor nulla, at euismod lacus tincidunt sed. Curabitur
2020-04-26 03:24:17,770 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ullamcorper dignissim nisl, eget iaculis orci vestibulum sed. Ut consectetur consectetur urna vestibulum ultricies.
2020-04-26 03:24:17,770 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Maecenas non felis arcu. Fusce in tortor metus. Vestibulum vel felis ut lorem ultricies pretium quis ut metus. Aliquam erat
2020-04-26 03:24:17,770 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> volutpat. Praesent a lorem porttitor, venenatis nisl volutpat, placerat dui. Vivamus ut justo eu orci tincidunt malesuada.
2020-04-26 03:24:17,770 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Interdum et malesuada fames ac ante ipsum primis in faucibus. Etiam facilisis nulla vel leo pretium varius.
2020-04-26 03:24:17,771 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Fusce eleifend tincidunt lacinia. Duis maximus, sapien ac fringilla pretium, augue leo aliquam ligula, quis rutrum leo sem
2020-04-26 03:24:17,771 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> vel magna. Duis commodo lobortis dui, ut rhoncus dolor. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 03:24:17,771 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> per inceptos himenaeos. Nam nec augue augue. Quisque eu orci arcu. Aliquam neque odio, eleifend a dolor sed, dapibus
2020-04-26 03:24:17,771 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> auctor justo. Aliquam sollicitudin arcu sit amet odio gravida, nec viverra nulla efficitur. Phasellus sed libero rutrum lacus
2020-04-26 03:24:17,771 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sollicitudin mattis. Sed fermentum sapien ac dolor elementum, quis vehicula sem tempus.
2020-04-26 03:24:17,771 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Etiam et orci non orci lobortis dictum id vitae massa. Aenean eu erat nulla. Sed posuere ullamcorper magna, tempor
2020-04-26 03:24:17,772 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ultrices justo feugiat rhoncus. Cras fringilla ligula nec euismod tristique. Duis vitae enim eget augue consectetur ultricies.
2020-04-26 03:24:17,772 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nam laoreet sapien at dictum consectetur. Suspendisse tristique purus neque, ut blandit nunc tincidunt et.
2020-04-26 03:24:17,772 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Duis pretium condimentum diam id viverra. Pellentesque sit amet dapibus eros, ac auctor lectus. Praesent eget tellus
2020-04-26 03:24:17,772 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> purus. Proin vel nisl sit amet orci laoreet faucibus eget eu nisi. Nulla id pharetra arcu. Lorem ipsum dolor sit amet,
2020-04-26 03:24:17,772 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> consectetur adipiscing elit. Vivamus ornare lectus eu metus venenatis, quis porttitor nibh convallis. Nulla nunc metus,
2020-04-26 03:24:17,772 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> tristique quis dui sed, interdum imperdiet nisl. Vestibulum mattis tincidunt lacus, imperdiet mattis libero varius rhoncus.
2020-04-26 03:24:17,773 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nam in auctor nisl. Nunc tincidunt accumsan pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 03:24:17,773 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> per inceptos himenaeos. Mauris luctus scelerisque augue, vel finibus ligula semper vel. Lorem ipsum dolor sit amet,
2020-04-26 03:24:17,773 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> consectetur adipiscing elit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.
2020-04-26 03:24:17,773 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nunc ultricies vel nunc eget mollis.
2020-04-26 03:24:17,773 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec ligula felis, ultrices vel blandit ut, hendrerit vel turpis. Duis faucibus dapibus mi ac semper. Duis id tortor tempus
2020-04-26 03:24:17,773 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> augue euismod tempus. Integer vehicula velit ut leo blandit sagittis. Vestibulum ante ipsum primis in faucibus orci luctus et
2020-04-26 03:24:17,773 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ultrices posuere cubilia Curae; Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis
2020-04-26 03:24:17,774 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> egestas. Nunc ut urna vel metus molestie venenatis nec non dui. Integer diam metus, aliquam a gravida et, varius id nulla.
2020-04-26 03:24:17,774 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nunc non porttitor ipsum. Aliquam sapien enim, eleifend nec nunc id, tempus tempus ex. Vivamus nec urna ornare,
2020-04-26 03:24:17,774 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> finibus leo at, posuere urna. Aenean est mi, porta ac gravida at, hendrerit quis elit. Quisque urna mauris, lobortis sit amet
2020-04-26 03:24:17,774 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> tortor eget, laoreet consectetur tortor. Suspendisse id imperdiet nisl, eget pellentesque tortor. Maecenas sit amet mi et ex
2020-04-26 03:24:17,774 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ornare porta sollicitudin vitae tellus. Donec nulla lorem, imperdiet non sodales vitae, congue quis sapien. Quisque nec
2020-04-26 03:24:17,774 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> mattis lacus. Sed dapibus nisi nec libero ornare, in accumsan dolor porttitor. Praesent sodales commodo ultricies.
2020-04-26 03:24:17,774 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Cras id ipsum vestibulum,
2020-04-26 03:24:17,774 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> venenatis eros vitae, maximus magna. Mauris eu blandit tortor, condimentum eleifend dolor.
2020-04-26 03:24:17,775 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Cras eu tellus feugiat, lobortis metus ac, consectetur orci. Phasellus bibendum tincidunt massa non venenatis. Nunc sed
2020-04-26 03:24:17,775 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> molestie metus, vel elementum tortor. Duis malesuada porta nisl ac molestie. In a tellus faucibus, convallis nunc nec,
2020-04-26 03:24:17,775 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sodales lacus. Donec vulputate interdum massa sed posuere. In dapibus eu ligula at sodales. Sed facilisis a sem eget
2020-04-26 03:24:17,775 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> lobortis. Ut viverra ipsum dictum pharetra auctor. Duis tincidunt nulla sapien, sit amet facilisis ante rhoncus eu. Aliquam
2020-04-26 03:24:17,775 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> luctus dolor tortor, vitae interdum felis elementum eget. Nam mattis leo gravida ex elementum, id facilisis lacus ornare.
2020-04-26 03:25:03,150 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed suscipit metus, sit amet tristique purus. Etiam sit amet
2020-04-26 03:25:03,151 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> leo sollicitudin, tincidunt lectus vel, ultricies mauris. Donec ultrices lorem in est eleifend, et feugiat libero semper. Duis
2020-04-26 03:25:03,151 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sodales gravida sapien eget efficitur. Ut mattis mollis blandit. Duis nec metus gravida, posuere dolor id, pretium urna.
2020-04-26 03:25:03,151 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Aliquam vitae purus ex. Etiam vitae ipsum leo. Integer blandit, arcu eget commodo scelerisque, risus leo aliquet diam, in
2020-04-26 03:25:03,151 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sagittis metus ex sed elit. Duis vel urna non est fringilla rutrum. Ut molestie sed risus in pharetra. Maecenas eget ante at
2020-04-26 03:25:03,151 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> nulla feugiat euismod. Suspendisse pharetra porttitor lacus non tristique.
2020-04-26 03:25:03,151 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Vivamus varius posuere ligula. Nullam magna metus, elementum vel elementum eu, elementum non magna. Ut cursus
2020-04-26 03:25:03,152 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> arcu vel ligula mollis, in interdum velit maximus. Pellentesque arcu lorem, porttitor et quam vitae, imperdiet venenatis
2020-04-26 03:25:03,152 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> magna. Etiam imperdiet erat vel lectus rhoncus sollicitudin. Praesent at mi a est suscipit tempor sed eu diam. In hac
2020-04-26 03:25:03,152 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> habitasse platea dictumst. Morbi erat mi, iaculis id hendrerit a, sollicitudin et ligula. Vivamus justo nibh, cursus at ultricies
2020-04-26 03:25:03,152 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sed, varius iaculis enim.
2020-04-26 03:25:03,152 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec consequat luctus sapien, quis aliquam ante tristique sit amet. Pellentesque accumsan sollicitudin mi a blandit.
2020-04-26 03:25:03,152 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec ac dui bibendum, pharetra nulla vitae, iaculis purus. Donec fermentum porttitor mollis. Mauris cursus fringilla ex,
2020-04-26 03:25:03,152 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> eget ullamcorper ipsum lacinia in. Nam eget vehicula dui. In eget turpis convallis, ultrices neque vitae, interdum turpis.
2020-04-26 03:25:03,153 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nullam non aliquam sapien, eget volutpat elit. Cras pharetra ex a orci faucibus tristique at ullamcorper nibh. Proin nec
2020-04-26 03:25:03,153 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> lacinia ante, eu rutrum sem.
2020-04-26 03:25:03,153 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Curabitur id libero purus. Vivamus vel velit turpis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Donec
2020-04-26 03:25:03,153 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> at urna eget augue efficitur porttitor at eu elit. Fusce feugiat tempor nulla, at euismod lacus tincidunt sed. Curabitur
2020-04-26 03:25:03,153 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ullamcorper dignissim nisl, eget iaculis orci vestibulum sed. Ut consectetur consectetur urna vestibulum ultricies.
2020-04-26 03:25:03,158 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Maecenas non felis arcu. Fusce in tortor metus. Vestibulum vel felis ut lorem ultricies pretium quis ut metus. Aliquam erat
2020-04-26 03:25:03,158 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> volutpat. Praesent a lorem porttitor, venenatis nisl volutpat, placerat dui. Vivamus ut justo eu orci tincidunt malesuada.
2020-04-26 03:25:03,158 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Interdum et malesuada fames ac ante ipsum primis in faucibus. Etiam facilisis nulla vel leo pretium varius.
2020-04-26 03:25:03,158 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Fusce eleifend tincidunt lacinia. Duis maximus, sapien ac fringilla pretium, augue leo aliquam ligula, quis rutrum leo sem
2020-04-26 03:25:03,158 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> vel magna. Duis commodo lobortis dui, ut rhoncus dolor. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 03:25:03,159 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> per inceptos himenaeos. Nam nec augue augue. Quisque eu orci arcu. Aliquam neque odio, eleifend a dolor sed, dapibus
2020-04-26 03:25:03,159 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> auctor justo. Aliquam sollicitudin arcu sit amet odio gravida, nec viverra nulla efficitur. Phasellus sed libero rutrum lacus
2020-04-26 03:25:03,159 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sollicitudin mattis. Sed fermentum sapien ac dolor elementum, quis vehicula sem tempus.
2020-04-26 03:25:03,159 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Etiam et orci non orci lobortis dictum id vitae massa. Aenean eu erat nulla. Sed posuere ullamcorper magna, tempor
2020-04-26 03:25:03,159 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ultrices justo feugiat rhoncus. Cras fringilla ligula nec euismod tristique. Duis vitae enim eget augue consectetur ultricies.
2020-04-26 03:25:03,159 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nam laoreet sapien at dictum consectetur. Suspendisse tristique purus neque, ut blandit nunc tincidunt et.
2020-04-26 03:25:03,159 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Duis pretium condimentum diam id viverra. Pellentesque sit amet dapibus eros, ac auctor lectus. Praesent eget tellus
2020-04-26 03:25:03,159 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> purus. Proin vel nisl sit amet orci laoreet faucibus eget eu nisi. Nulla id pharetra arcu. Lorem ipsum dolor sit amet,
2020-04-26 03:25:03,160 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> consectetur adipiscing elit. Vivamus ornare lectus eu metus venenatis, quis porttitor nibh convallis. Nulla nunc metus,
2020-04-26 03:25:03,160 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> tristique quis dui sed, interdum imperdiet nisl. Vestibulum mattis tincidunt lacus, imperdiet mattis libero varius rhoncus.
2020-04-26 03:25:03,160 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nam in auctor nisl. Nunc tincidunt accumsan pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra,
2020-04-26 03:25:03,160 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> per inceptos himenaeos. Mauris luctus scelerisque augue, vel finibus ligula semper vel. Lorem ipsum dolor sit amet,
2020-04-26 03:25:03,160 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> consectetur adipiscing elit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.
2020-04-26 03:25:03,160 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nunc ultricies vel nunc eget mollis.
2020-04-26 03:25:03,161 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Donec ligula felis, ultrices vel blandit ut, hendrerit vel turpis. Duis faucibus dapibus mi ac semper. Duis id tortor tempus
2020-04-26 03:25:03,161 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> augue euismod tempus. Integer vehicula velit ut leo blandit sagittis. Vestibulum ante ipsum primis in faucibus orci luctus et
2020-04-26 03:25:03,161 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ultrices posuere cubilia Curae; Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis
2020-04-26 03:25:03,161 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> egestas. Nunc ut urna vel metus molestie venenatis nec non dui. Integer diam metus, aliquam a gravida et, varius id nulla.
2020-04-26 03:25:03,161 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Nunc non porttitor ipsum. Aliquam sapien enim, eleifend nec nunc id, tempus tempus ex. Vivamus nec urna ornare,
2020-04-26 03:25:03,165 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> finibus leo at, posuere urna. Aenean est mi, porta ac gravida at, hendrerit quis elit. Quisque urna mauris, lobortis sit amet
2020-04-26 03:25:03,165 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> tortor eget, laoreet consectetur tortor. Suspendisse id imperdiet nisl, eget pellentesque tortor. Maecenas sit amet mi et ex
2020-04-26 03:25:03,165 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> ornare porta sollicitudin vitae tellus. Donec nulla lorem, imperdiet non sodales vitae, congue quis sapien. Quisque nec
2020-04-26 03:25:03,165 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> mattis lacus. Sed dapibus nisi nec libero ornare, in accumsan dolor porttitor. Praesent sodales commodo ultricies.
2020-04-26 03:25:03,165 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Cras id ipsum vestibulum,
2020-04-26 03:25:03,165 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> venenatis eros vitae, maximus magna. Mauris eu blandit tortor, condimentum eleifend dolor.
2020-04-26 03:25:03,166 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> Cras eu tellus feugiat, lobortis metus ac, consectetur orci. Phasellus bibendum tincidunt massa non venenatis. Nunc sed
2020-04-26 03:25:03,166 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> molestie metus, vel elementum tortor. Duis malesuada porta nisl ac molestie. In a tellus faucibus, convallis nunc nec,
2020-04-26 03:25:03,166 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> sodales lacus. Donec vulputate interdum massa sed posuere. In dapibus eu ligula at sodales. Sed facilisis a sem eget
2020-04-26 03:25:03,166 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> lobortis. Ut viverra ipsum dictum pharetra auctor. Duis tincidunt nulla sapien, sit amet facilisis ante rhoncus eu. Aliquam
2020-04-26 03:25:03,166 INFO com.counter.text.service.ParagraphLineConsumer [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] #### -> Consumed message -> luctus dolor tortor, vitae interdum felis elementum eget. Nam mattis leo gravida ex elementum, id facilisis lacus ornare.
2020-04-26 08:31:56,549 ERROR org.springframework.test.context.TestContextManager [main] Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@6c45ee6e] to prepare test instance [com.counter.text.dao.TextCounterDatabaseImplTest@6b3e12b5]
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'com.counter.text.dao.TextCounterDatabaseImplTest': Unsatisfied dependency expressed through field 'textCounterDatabase'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.counter.text.dao.TextCounterDatabase' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:116)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:393)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:119)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.counter.text.dao.TextCounterDatabase' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1695)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1253)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 27 common frames omitted
2020-04-26 08:31:56,559 ERROR org.springframework.test.context.TestContextManager [main] Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@6c45ee6e] to prepare test instance [com.counter.text.dao.TextCounterDatabaseImplTest@2f17e30d]
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'com.counter.text.dao.TextCounterDatabaseImplTest': Unsatisfied dependency expressed through field 'textCounterDatabase'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.counter.text.dao.TextCounterDatabase' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:116)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:393)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:119)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.counter.text.dao.TextCounterDatabase' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1695)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1253)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 27 common frames omitted
2020-04-26 08:31:56,563 ERROR org.springframework.test.context.TestContextManager [main] Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@6c45ee6e] to prepare test instance [com.counter.text.dao.TextCounterDatabaseImplTest@4aa83f4f]
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'com.counter.text.dao.TextCounterDatabaseImplTest': Unsatisfied dependency expressed through field 'textCounterDatabase'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.counter.text.dao.TextCounterDatabase' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:116)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:393)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:119)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.counter.text.dao.TextCounterDatabase' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1695)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1253)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 27 common frames omitted
2020-04-26 12:19:18,567 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> 
2020-04-26 12:23:16,904 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> abc xyz, pqr
2020-04-26 12:25:42,456 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> abc xyz, pqr, pqr xyz
2020-04-26 12:26:19,562 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> abc xyz, pqr, pqr xyz ABC
2020-04-26 12:28:10,476 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> abc xyz, pqr, pqr xyz ABC
2020-04-26 12:28:10,499 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> 
2020-04-26 13:25:57,404 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 9799 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 13:25:57,407 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 13:25:57,407 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 13:25:58,500 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field applicationInitializerService in com.counter.text.controller.TextSearchController required a bean of type 'com.counter.text.service.ApplicationInitializerService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.counter.text.service.ApplicationInitializerService' in your configuration.

2020-04-26 13:25:58,502 ERROR org.springframework.test.context.TestContextManager [main] Caught exception while allowing TestExecutionListener [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@545b5ed0] to prepare test instance [com.counter.text.controller.TextSearchControllerTest@5a7df831]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.postProcessFields(MockitoTestExecutionListener.java:95)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.injectFields(MockitoTestExecutionListener.java:79)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.prepareTestInstance(MockitoTestExecutionListener.java:54)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'textSearchController': Unsatisfied dependency expressed through field 'applicationInitializerService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.counter.text.service.ApplicationInitializerService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:116)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:125)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	... 25 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.counter.text.service.ApplicationInitializerService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1695)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1253)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 43 common frames omitted
2020-04-26 13:27:44,797 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 9806 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 13:27:44,799 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 13:27:44,799 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 13:27:46,331 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.823 seconds (JVM running for 2.56)
2020-04-26 13:41:45,962 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 9903 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 13:41:45,965 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 13:41:45,965 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 13:41:47,385 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.725 seconds (JVM running for 2.442)
2020-04-26 13:48:50,825 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 9934 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 13:48:50,827 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 13:48:50,827 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 13:48:52,397 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.869 seconds (JVM running for 2.711)
2020-04-26 13:51:37,747 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 9972 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 13:51:37,749 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 13:51:37,750 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 13:51:39,592 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.208 seconds (JVM running for 3.04)
2020-04-26 13:53:55,084 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10023 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 13:53:55,086 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 13:53:55,086 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 13:53:56,419 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.584 seconds (JVM running for 2.323)
2020-04-26 13:55:36,018 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10046 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 13:55:36,020 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 13:55:36,020 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 13:55:37,746 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.009 seconds (JVM running for 2.764)
2020-04-26 13:57:38,582 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10055 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 13:57:38,584 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 13:57:38,584 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 13:57:40,076 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.792 seconds (JVM running for 2.633)
2020-04-26 13:58:46,007 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10060 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 13:58:46,009 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 13:58:46,009 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 13:58:47,513 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.781 seconds (JVM running for 2.532)
2020-04-26 14:10:42,643 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10114 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:10:42,645 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:10:42,645 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:10:44,135 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.71 seconds (JVM running for 2.416)
2020-04-26 14:38:58,212 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10209 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:38:58,215 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:38:58,215 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:38:59,888 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.02 seconds (JVM running for 2.918)
2020-04-26 14:40:48,222 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10232 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:40:48,224 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:40:48,224 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:40:49,904 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.0 seconds (JVM running for 2.898)
2020-04-26 14:41:15,983 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10237 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:41:15,985 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:41:15,985 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:41:17,528 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.797 seconds (JVM running for 2.544)
2020-04-26 14:42:14,541 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10250 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:42:14,543 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:42:14,543 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:42:16,378 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.11 seconds (JVM running for 2.901)
2020-04-26 14:50:18,851 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10304 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:50:18,853 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:50:18,853 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:50:20,367 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.831 seconds (JVM running for 2.702)
2020-04-26 14:50:41,962 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10311 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:50:41,964 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:50:41,966 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:50:43,573 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.964 seconds (JVM running for 2.745)
2020-04-26 14:51:47,964 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10317 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:51:47,966 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:51:47,966 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:51:49,598 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.956 seconds (JVM running for 2.756)
2020-04-26 14:52:31,390 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10323 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:52:31,391 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:52:31,391 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:52:32,935 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.766 seconds (JVM running for 2.526)
2020-04-26 14:54:09,013 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10330 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:54:09,017 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:54:09,017 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:54:10,587 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.881 seconds (JVM running for 2.682)
2020-04-26 14:54:45,559 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10334 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:54:45,561 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:54:45,561 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:54:47,123 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.86 seconds (JVM running for 2.61)
2020-04-26 14:55:16,041 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10339 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:55:16,043 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:55:16,043 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:55:17,602 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.87 seconds (JVM running for 2.687)
2020-04-26 14:56:02,835 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10343 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:56:02,838 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:56:02,838 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:56:04,386 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.881 seconds (JVM running for 2.676)
2020-04-26 14:56:37,273 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10347 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:56:37,275 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:56:37,276 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:56:38,833 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.865 seconds (JVM running for 2.722)
2020-04-26 14:59:40,584 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10361 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 14:59:40,586 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 14:59:40,586 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 14:59:42,034 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.725 seconds (JVM running for 2.519)
2020-04-26 15:00:02,768 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10364 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:00:02,770 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:00:02,770 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:00:04,239 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.734 seconds (JVM running for 2.442)
2020-04-26 15:01:10,171 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10369 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:01:10,173 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:01:10,173 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:01:11,575 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.654 seconds (JVM running for 2.414)
2020-04-26 15:46:15,219 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10469 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:46:15,221 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:46:15,221 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:46:16,842 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.923 seconds (JVM running for 2.731)
2020-04-26 15:50:06,818 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10474 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:50:06,821 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:50:06,821 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:50:08,408 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.877 seconds (JVM running for 2.616)
2020-04-26 15:50:31,267 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10480 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:50:31,269 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:50:31,269 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:50:32,745 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.758 seconds (JVM running for 2.482)
2020-04-26 15:50:52,945 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10484 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:50:52,947 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:50:52,947 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:50:54,446 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.786 seconds (JVM running for 2.509)
2020-04-26 15:51:28,078 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10488 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:51:28,081 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:51:28,081 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:51:29,591 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.808 seconds (JVM running for 2.547)
2020-04-26 15:51:38,643 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10491 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:51:38,645 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:51:38,645 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:51:40,184 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.861 seconds (JVM running for 2.591)
2020-04-26 15:51:56,147 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10494 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:51:56,149 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:51:56,150 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:51:57,841 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.007 seconds (JVM running for 3.364)
2020-04-26 15:54:30,927 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10512 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:54:30,929 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:54:30,929 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:54:32,378 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.761 seconds (JVM running for 2.519)
2020-04-26 15:55:40,704 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10516 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:55:40,707 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:55:40,707 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:55:42,475 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.125 seconds (JVM running for 3.159)
2020-04-26 15:57:14,210 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10552 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:57:14,212 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:57:14,212 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:57:16,024 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.162 seconds (JVM running for 3.109)
2020-04-26 15:57:49,511 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10557 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 15:57:49,512 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 15:57:49,513 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 15:57:51,271 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.082 seconds (JVM running for 3.07)
2020-04-26 16:00:11,734 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10574 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:00:11,736 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:00:11,736 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:00:13,395 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.023 seconds (JVM running for 2.986)
2020-04-26 16:00:38,591 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10578 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:00:38,593 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:00:38,593 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:00:40,090 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.807 seconds (JVM running for 2.553)
2020-04-26 16:01:02,054 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10582 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:01:02,056 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:01:02,056 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:01:03,625 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.895 seconds (JVM running for 2.69)
2020-04-26 16:01:05,801 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 10585 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:01:05,803 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:01:05,803 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:01:07,257 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.758 seconds (JVM running for 2.707)
2020-04-26 16:04:35,164 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11280 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:04:35,166 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:04:35,166 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:04:36,766 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.949 seconds (JVM running for 2.865)
2020-04-26 16:05:00,929 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11286 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:05:00,932 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:05:00,932 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:05:02,491 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.882 seconds (JVM running for 2.726)
2020-04-26 16:05:34,871 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11290 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:05:34,873 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:05:34,873 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:05:36,465 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.932 seconds (JVM running for 2.694)
2020-04-26 16:05:44,286 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11294 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:05:44,289 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:05:44,289 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:05:46,016 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.06 seconds (JVM running for 2.857)
2020-04-26 16:10:04,942 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11324 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:10:04,944 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:10:04,945 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:10:07,160 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.942 seconds (JVM running for 3.866)
2020-04-26 16:10:20,603 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11330 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:10:20,605 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:10:20,605 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:10:22,184 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.918 seconds (JVM running for 2.774)
2020-04-26 16:10:46,606 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11336 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:10:46,609 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:10:46,609 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:10:48,357 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.065 seconds (JVM running for 2.909)
2020-04-26 16:11:26,737 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11344 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:11:26,740 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:11:26,742 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:11:28,615 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.253 seconds (JVM running for 3.242)
2020-04-26 16:12:32,232 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11351 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:12:32,234 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:12:32,234 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:12:33,801 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.913 seconds (JVM running for 2.758)
2020-04-26 16:14:26,446 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11363 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:14:26,449 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:14:26,450 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:14:28,002 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.857 seconds (JVM running for 2.606)
2020-04-26 16:32:01,140 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11458 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:32:01,142 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:32:01,142 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:32:02,909 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 2.104 seconds (JVM running for 3.025)
2020-04-26 16:32:35,848 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11463 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:32:35,849 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:32:35,850 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:32:37,404 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.815 seconds (JVM running for 2.619)
2020-04-26 16:33:08,511 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11468 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:33:08,513 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:33:08,513 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:33:09,966 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.737 seconds (JVM running for 2.499)
2020-04-26 16:38:11,612 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11521 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:38:11,615 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:38:11,615 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:38:13,098 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.739 seconds (JVM running for 2.474)
2020-04-26 16:42:44,677 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11554 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:42:44,679 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:42:44,680 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:42:46,281 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.924 seconds (JVM running for 2.772)
2020-04-26 16:43:15,917 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11559 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:43:15,919 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:43:15,919 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:43:17,585 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.906 seconds (JVM running for 2.669)
2020-04-26 16:44:11,952 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11567 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:44:11,954 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:44:11,954 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:44:13,439 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.753 seconds (JVM running for 2.483)
2020-04-26 16:45:27,459 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 11574 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 16:45:27,462 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 16:45:27,462 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 16:45:28,981 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.775 seconds (JVM running for 2.541)
2020-04-26 19:25:49,479 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> abc xyz, pqr, pqr xyz ABC
2020-04-26 19:25:49,499 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> 
2020-04-26 19:25:50,009 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 12582 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 19:25:50,010 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 19:25:50,010 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 19:25:50,998 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.213 seconds (JVM running for 3.159)
2020-04-26 19:26:04,978 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> abc xyz, pqr, pqr xyz ABC
2020-04-26 19:26:05,009 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> 
2020-04-26 19:26:06,033 ERROR org.springframework.boot.SpringApplication [main] Application run failed
java.lang.NullPointerException: null
	at com.intellij.rt.coverage.data.ProjectData.touchLine(ProjectData.java:239)
	at org.springframework.util.ConcurrentReferenceHashMap$Task.<init>(ConcurrentReferenceHashMap.java:787)
	at org.springframework.util.ConcurrentReferenceHashMap$1.<init>(ConcurrentReferenceHashMap.java:282)
	at org.springframework.util.ConcurrentReferenceHashMap.put(ConcurrentReferenceHashMap.java:282)
	at org.springframework.util.ConcurrentReferenceHashMap.put(ConcurrentReferenceHashMap.java:271)
	at org.springframework.core.annotation.AnnotationsScanner.getDeclaredAnnotations(AnnotationsScanner.java:476)
	at org.springframework.core.annotation.AnnotationsScanner.getDeclaredAnnotations(AnnotationsScanner.java:439)
	at org.springframework.core.annotation.AnnotationsScanner.processClassHierarchy(AnnotationsScanner.java:210)
	at org.springframework.core.annotation.AnnotationsScanner.processClassHierarchy(AnnotationsScanner.java:218)
	at org.springframework.core.annotation.AnnotationsScanner.processClassHierarchy(AnnotationsScanner.java:194)
	at org.springframework.core.annotation.AnnotationsScanner.processClass(AnnotationsScanner.java:128)
	at org.springframework.core.annotation.AnnotationsScanner.process(AnnotationsScanner.java:107)
	at org.springframework.core.annotation.AnnotationsScanner.scan(AnnotationsScanner.java:97)
	at org.springframework.core.annotation.AnnotationsScanner.scan(AnnotationsScanner.java:78)
	at org.springframework.core.annotation.TypeMappedAnnotations.scan(TypeMappedAnnotations.java:242)
	at org.springframework.core.annotation.TypeMappedAnnotations.get(TypeMappedAnnotations.java:149)
	at org.springframework.core.annotation.TypeMappedAnnotations.get(TypeMappedAnnotations.java:131)
	at org.springframework.core.annotation.OrderUtils.findOrder(OrderUtils.java:111)
	at org.springframework.core.annotation.OrderUtils.getOrderFromAnnotations(OrderUtils.java:104)
	at org.springframework.core.annotation.AnnotationAwareOrderComparator.findOrderFromAnnotation(AnnotationAwareOrderComparator.java:75)
	at org.springframework.core.annotation.AnnotationAwareOrderComparator.findOrder(AnnotationAwareOrderComparator.java:68)
	at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:129)
	at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:117)
	at org.springframework.core.OrderComparator.doCompare(OrderComparator.java:86)
	at org.springframework.core.OrderComparator.compare(OrderComparator.java:73)
	at java.base/java.util.TimSort.binarySort(TimSort.java:296)
	at java.base/java.util.TimSort.sort(TimSort.java:221)
	at java.base/java.util.Arrays.sort(Arrays.java:1515)
	at java.base/java.util.ArrayList.sort(ArrayList.java:1749)
	at org.springframework.core.annotation.AnnotationAwareOrderComparator.sort(AnnotationAwareOrderComparator.java:111)
	at org.springframework.core.io.support.SpringFactoriesLoader.loadFactories(SpringFactoriesLoader.java:106)
	at org.springframework.boot.context.config.ConfigFileApplicationListener.loadPostProcessors(ConfigFileApplicationListener.java:193)
	at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEnvironmentPreparedEvent(ConfigFileApplicationListener.java:184)
	at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEvent(ConfigFileApplicationListener.java:176)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:76)
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:53)
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:345)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:125)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.postProcessFields(MockitoTestExecutionListener.java:95)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.injectFields(MockitoTestExecutionListener.java:79)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.prepareTestInstance(MockitoTestExecutionListener.java:54)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
2020-04-26 19:26:06,034 ERROR org.springframework.test.context.TestContextManager [main] Caught exception while allowing TestExecutionListener [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@66deec87] to prepare test instance [com.counter.text.controller.TextSearchControllerTest@5d342959]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.postProcessFields(MockitoTestExecutionListener.java:95)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.injectFields(MockitoTestExecutionListener.java:79)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.prepareTestInstance(MockitoTestExecutionListener.java:54)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: java.lang.NullPointerException: null
	at com.intellij.rt.coverage.data.ProjectData.touchLine(ProjectData.java:239)
	at org.springframework.util.ConcurrentReferenceHashMap$Task.<init>(ConcurrentReferenceHashMap.java:787)
	at org.springframework.util.ConcurrentReferenceHashMap$1.<init>(ConcurrentReferenceHashMap.java:282)
	at org.springframework.util.ConcurrentReferenceHashMap.put(ConcurrentReferenceHashMap.java:282)
	at org.springframework.util.ConcurrentReferenceHashMap.put(ConcurrentReferenceHashMap.java:271)
	at org.springframework.core.annotation.AnnotationsScanner.getDeclaredAnnotations(AnnotationsScanner.java:476)
	at org.springframework.core.annotation.AnnotationsScanner.getDeclaredAnnotations(AnnotationsScanner.java:439)
	at org.springframework.core.annotation.AnnotationsScanner.processClassHierarchy(AnnotationsScanner.java:210)
	at org.springframework.core.annotation.AnnotationsScanner.processClassHierarchy(AnnotationsScanner.java:218)
	at org.springframework.core.annotation.AnnotationsScanner.processClassHierarchy(AnnotationsScanner.java:194)
	at org.springframework.core.annotation.AnnotationsScanner.processClass(AnnotationsScanner.java:128)
	at org.springframework.core.annotation.AnnotationsScanner.process(AnnotationsScanner.java:107)
	at org.springframework.core.annotation.AnnotationsScanner.scan(AnnotationsScanner.java:97)
	at org.springframework.core.annotation.AnnotationsScanner.scan(AnnotationsScanner.java:78)
	at org.springframework.core.annotation.TypeMappedAnnotations.scan(TypeMappedAnnotations.java:242)
	at org.springframework.core.annotation.TypeMappedAnnotations.get(TypeMappedAnnotations.java:149)
	at org.springframework.core.annotation.TypeMappedAnnotations.get(TypeMappedAnnotations.java:131)
	at org.springframework.core.annotation.OrderUtils.findOrder(OrderUtils.java:111)
	at org.springframework.core.annotation.OrderUtils.getOrderFromAnnotations(OrderUtils.java:104)
	at org.springframework.core.annotation.AnnotationAwareOrderComparator.findOrderFromAnnotation(AnnotationAwareOrderComparator.java:75)
	at org.springframework.core.annotation.AnnotationAwareOrderComparator.findOrder(AnnotationAwareOrderComparator.java:68)
	at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:129)
	at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:117)
	at org.springframework.core.OrderComparator.doCompare(OrderComparator.java:86)
	at org.springframework.core.OrderComparator.compare(OrderComparator.java:73)
	at java.base/java.util.TimSort.binarySort(TimSort.java:296)
	at java.base/java.util.TimSort.sort(TimSort.java:221)
	at java.base/java.util.Arrays.sort(Arrays.java:1515)
	at java.base/java.util.ArrayList.sort(ArrayList.java:1749)
	at org.springframework.core.annotation.AnnotationAwareOrderComparator.sort(AnnotationAwareOrderComparator.java:111)
	at org.springframework.core.io.support.SpringFactoriesLoader.loadFactories(SpringFactoriesLoader.java:106)
	at org.springframework.boot.context.config.ConfigFileApplicationListener.loadPostProcessors(ConfigFileApplicationListener.java:193)
	at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEnvironmentPreparedEvent(ConfigFileApplicationListener.java:184)
	at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEvent(ConfigFileApplicationListener.java:176)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:76)
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:53)
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:345)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:125)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	... 44 common frames omitted
2020-04-26 19:26:06,260 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 12593 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 19:26:06,260 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 19:26:06,260 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 19:26:07,594 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.548 seconds (JVM running for 4.992)
2020-04-26 19:26:28,591 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> abc xyz, pqr, pqr xyz ABC
2020-04-26 19:26:28,620 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> 
2020-04-26 19:26:29,703 ERROR org.springframework.boot.SpringApplication [main] Application run failed
java.lang.NullPointerException: null
	at com.intellij.rt.coverage.data.ProjectData.touchLine(ProjectData.java:239)
	at org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource.<init>(SystemEnvironmentPropertySourceEnvironmentPostProcessor.java:83)
	at org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor.replacePropertySource(SystemEnvironmentPropertySourceEnvironmentPostProcessor.java:62)
	at org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor.postProcessEnvironment(SystemEnvironmentPropertySourceEnvironmentPostProcessor.java:54)
	at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEnvironmentPreparedEvent(ConfigFileApplicationListener.java:188)
	at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEvent(ConfigFileApplicationListener.java:176)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:76)
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:53)
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:345)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:125)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.postProcessFields(MockitoTestExecutionListener.java:95)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.injectFields(MockitoTestExecutionListener.java:79)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.prepareTestInstance(MockitoTestExecutionListener.java:54)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
2020-04-26 19:26:29,704 ERROR org.springframework.test.context.TestContextManager [main] Caught exception while allowing TestExecutionListener [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@66deec87] to prepare test instance [com.counter.text.controller.TextSearchControllerTest@5d342959]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.postProcessFields(MockitoTestExecutionListener.java:95)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.injectFields(MockitoTestExecutionListener.java:79)
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.prepareTestInstance(MockitoTestExecutionListener.java:54)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: java.lang.NullPointerException: null
	at com.intellij.rt.coverage.data.ProjectData.touchLine(ProjectData.java:239)
	at org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource.<init>(SystemEnvironmentPropertySourceEnvironmentPostProcessor.java:83)
	at org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor.replacePropertySource(SystemEnvironmentPropertySourceEnvironmentPostProcessor.java:62)
	at org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor.postProcessEnvironment(SystemEnvironmentPropertySourceEnvironmentPostProcessor.java:54)
	at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEnvironmentPreparedEvent(ConfigFileApplicationListener.java:188)
	at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEvent(ConfigFileApplicationListener.java:176)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:76)
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:53)
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:345)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:125)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	... 44 common frames omitted
2020-04-26 19:26:29,941 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 12598 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 19:26:29,941 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 19:26:29,942 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 19:26:31,399 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.684 seconds (JVM running for 5.457)
2020-04-26 19:29:27,460 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> abc xyz, pqr, pqr xyz ABC
2020-04-26 19:29:27,477 INFO com.counter.text.service.ParagraphLineConsumer [main] #### -> Consumed message -> 
2020-04-26 19:29:27,917 INFO com.counter.text.controller.TextSearchControllerTest [main] Starting TextSearchControllerTest on 192-168-1-137.tpgi.com.au with PID 12607 (started by ranjanlal in /Users/ranjanlal/TEMP/CODING-EXERCISE/text-search-counter-api)
2020-04-26 19:29:27,917 DEBUG com.counter.text.controller.TextSearchControllerTest [main] Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-04-26 19:29:27,917 INFO com.counter.text.controller.TextSearchControllerTest [main] The following profiles are active: local
2020-04-26 19:29:28,869 INFO com.counter.text.controller.TextSearchControllerTest [main] Started TextSearchControllerTest in 1.136 seconds (JVM running for 2.848)
